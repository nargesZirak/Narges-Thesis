********************************  NODE 1  *******************************
class ActionListHandler extends HandlerBase {
  ActionListHandler(  String path,  ActionSet actionSet){
    this.path=path;
    this.actionSet=actionSet;
    stateStack=new Stack();
  }
  public Object resolveEntity(  String publicId,  String systemId){
    if ("actions.dtd".equals(systemId)) {
      return new StringReader("<!-- -->");
    }
    return null;
  }
  public void attribute(  String aname,  String value,  boolean isSpecified){
    aname=(aname == null) ? null : aname.intern();
    value=(value == null) ? null : value.intern();
    if (aname == "NAME")     actionName=value;
 else     if (aname == "NO_REPEAT")     noRepeat=(value == "TRUE");
 else     if (aname == "NO_RECORD")     noRecord=(value == "TRUE");
 else     if (aname == "NO_REMEMBER_LAST")     noRememberLast=(value == "TRUE");
  }
  public void doctypeDecl(  String name,  String publicId,  String systemId) throws Exception {
    if ("ACTIONS".equals(name))     return;
    Log.log(Log.ERROR,this,path + ": DOCTYPE must be ACTIONS");
  }
  public void charData(  char[] c,  int off,  int len){
    String tag=peekElement();
    String text=new String(c,off,len);
    if (tag == "CODE") {
      code=text;
    }
 else     if (tag == "IS_SELECTED") {
      isSelected=text;
    }
  }
  public void startElement(  String tag){
    tag=pushElement(tag);
    if (tag == "ACTION") {
      code=null;
      isSelected=null;
    }
  }
  public void endElement(  String name){
    if (name == null)     return;
    String tag=peekElement();
    if (name.equals(tag)) {
      if (tag == "ACTION") {
        actionSet.addAction(new BeanShellAction(actionName,code,isSelected,noRepeat,noRecord,noRememberLast));
        noRepeat=noRecord=noRememberLast=false;
      }
      popElement();
    }
 else {
      throw new InternalError();
    }
  }
  public void startDocument(){
    try {
      pushElement(null);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  private String path;
  private ActionSet actionSet;
  private String actionName;
  private String code;
  private String isSelected;
  private boolean noRepeat;
  private boolean noRecord;
  private boolean noRememberLast;
  private Stack stateStack;
  private String pushElement(  String name){
    name=(name == null) ? null : name.intern();
    stateStack.push(name);
    return name;
  }
  private String peekElement(){
    return (String)stateStack.peek();
  }
  private String popElement(){
    return (String)stateStack.pop();
  }
}
********************************  NODE 2  *******************************
class ActionListHandler extends HandlerBase {
  ActionListHandler(  String path,  ActionSet actionSet){
    this.path=path;
    this.actionSet=actionSet;
    stateStack=new Stack();
  }
  public Object resolveEntity(  String publicId,  String systemId){
    if ("actions.dtd".equals(systemId)) {
      return new StringReader("<!-- -->");
    }
    return null;
  }
  public void attribute(  String aname,  String value,  boolean isSpecified){
    aname=(aname == null) ? null : aname.intern();
    value=(value == null) ? null : value.intern();
    if (aname == "NAME")     actionName=value;
 else     if (aname == "NO_REPEAT")     noRepeat=(value == "TRUE");
 else     if (aname == "NO_RECORD")     noRecord=(value == "TRUE");
 else     if (aname == "NO_REMEMBER_LAST")     noRememberLast=(value == "TRUE");
  }
  public void doctypeDecl(  String name,  String publicId,  String systemId) throws Exception {
    if ("ACTIONS".equals(name))     return;
    Log.log(Log.ERROR,this,path + ": DOCTYPE must be ACTIONS");
  }
  public void charData(  char[] c,  int off,  int len){
    String tag=peekElement();
    String text=new String(c,off,len);
    if (tag == "CODE") {
      code=text;
    }
 else     if (tag == "IS_SELECTED") {
      isSelected=text;
    }
  }
  public void startElement(  String tag){
    tag=pushElement(tag);
    if (tag == "ACTION") {
      code=null;
      isSelected=null;
    }
  }
  public void endElement(  String name){
    if (name == null)     return;
    String tag=peekElement();
    if (name.equals(tag)) {
      if (tag == "ACTION") {
        actionSet.addAction(new BeanShellAction(actionName,code,isSelected,noRepeat,noRecord,noRememberLast));
        noRepeat=noRecord=noRememberLast=false;
      }
      popElement();
    }
 else {
      throw new InternalError();
    }
  }
  public void startDocument(){
    try {
      pushElement(null);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  private String path;
  private ActionSet actionSet;
  private String actionName;
  private String code;
  private String isSelected;
  private boolean noRepeat;
  private boolean noRecord;
  private boolean noRememberLast;
  private Stack stateStack;
  private String pushElement(  String name){
    name=(name == null) ? null : name.intern();
    stateStack.push(name);
    return name;
  }
  private String peekElement(){
    return (String)stateStack.peek();
  }
  private String popElement(){
    return (String)stateStack.pop();
  }
}
*****************************  ANTIUNIFIER  ****************************
TYPES[INTERFACE[false] ; NAME[IDENTIFIER[ActionListHandler]] ; SUPERCLASSTYPE[NAME[IDENTIFIER[HandlerBase]]] ; BODYDECLARATIONS[MODIFIERS[KEYWORD[public]] ; CONSTRUCTOR[false] ; RETURNTYPE2[PRIMITIVETYPECODE[void]] ; NAME[IDENTIFIER[charData]] ; PARAMETERS[TYPE[COMPONENTTYPE[PRIMITIVETYPECODE[char]]] ; VARARGS[false] ; NAME[IDENTIFIER[c]] ; EXTRADIMENSIONS[0], TYPE[PRIMITIVETYPECODE[int]] ; VARARGS[false] ; NAME[IDENTIFIER[off]] ; EXTRADIMENSIONS[0], TYPE[PRIMITIVETYPECODE[int]] ; VARARGS[false] ; NAME[IDENTIFIER[len]] ; EXTRADIMENSIONS[0]] ; EXTRADIMENSIONS[0] ; BODY[STATEMENTS[TYPE[NAME[IDENTIFIER[String]]] ; FRAGMENTS[NAME[IDENTIFIER[text]] ; EXTRADIMENSIONS[0] ; INITIALIZER[TYPE[NAME[IDENTIFIER[String]]] ; ARGUMENTS[IDENTIFIER[c], IDENTIFIER[off], IDENTIFIER[len]]]], TYPE[NAME[IDENTIFIER[String]]] ; FRAGMENTS[NAME[IDENTIFIER[tag]] ; EXTRADIMENSIONS[0] ; INITIALIZER[NAME[IDENTIFIER[peekElement]] ; ]], EXPRESSION[LEFTOPERAND[IDENTIFIER[tag]] ; OPERATOR[==] ; RIGHTOPERAND[ESCAPEDVALUE["CODE"]] ; ] ; THENSTATEMENT[STATEMENTS[EXPRESSION[LEFTHANDSIDE[IDENTIFIER[code]] ; OPERATOR[=] ; RIGHTHANDSIDE[IDENTIFIER[text]]]]] ; ELSESTATEMENT[EXPRESSION[LEFTOPERAND[IDENTIFIER[tag]] ; OPERATOR[==] ; RIGHTOPERAND[ESCAPEDVALUE["IS_SELECTED"]] ; ] ; THENSTATEMENT[STATEMENTS[EXPRESSION[LEFTHANDSIDE[IDENTIFIER[isSelected]] ; OPERATOR[=] ; RIGHTHANDSIDE[IDENTIFIER[text]]]]]]]], MODIFIERS[KEYWORD[public]] ; CONSTRUCTOR[false] ; RETURNTYPE2[PRIMITIVETYPECODE[void]] ; NAME[IDENTIFIER[doctypeDecl]] ; PARAMETERS[TYPE[NAME[IDENTIFIER[String]]] ; VARARGS[false] ; NAME[IDENTIFIER[name]] ; EXTRADIMENSIONS[0], TYPE[NAME[IDENTIFIER[String]]] ; VARARGS[false] ; NAME[IDENTIFIER[publicId]] ; EXTRADIMENSIONS[0], TYPE[NAME[IDENTIFIER[String]]] ; VARARGS[false] ; NAME[IDENTIFIER[systemId]] ; EXTRADIMENSIONS[0]] ; EXTRADIMENSIONS[0] ; THROWNEXCEPTIONS[IDENTIFIER[Exception]] ; BODY[STATEMENTS[EXPRESSION[EXPRESSION[IDENTIFIER[Log]] ; NAME[IDENTIFIER[log]] ; ARGUMENTS[LEFTOPERAND[IDENTIFIER[path]] ; OPERATOR[+] ; RIGHTOPERAND[ESCAPEDVALUE[": DOCTYPE must be ACTIONS"]] ; , QUALIFIER[IDENTIFIER[Log]] ; NAME[IDENTIFIER[ERROR]], ]], EXPRESSION[EXPRESSION[ESCAPEDVALUE["ACTIONS"]] ; NAME[IDENTIFIER[equals]] ; ARGUMENTS[IDENTIFIER[name]]] ; ]], MODIFIERS[KEYWORD[public]] ; CONSTRUCTOR[false] ; RETURNTYPE2[PRIMITIVETYPECODE[void]] ; NAME[IDENTIFIER[attribute]] ; PARAMETERS[TYPE[NAME[IDENTIFIER[String]]] ; VARARGS[false] ; NAME[IDENTIFIER[aname]] ; EXTRADIMENSIONS[0], TYPE[NAME[IDENTIFIER[String]]] ; VARARGS[false] ; NAME[IDENTIFIER[value]] ; EXTRADIMENSIONS[0], TYPE[PRIMITIVETYPECODE[boolean]] ; VARARGS[false] ; NAME[IDENTIFIER[isSpecified]] ; EXTRADIMENSIONS[0]] ; EXTRADIMENSIONS[0] ; BODY[STATEMENTS[EXPRESSION[LEFTOPERAND[IDENTIFIER[aname]] ; OPERATOR[==] ; RIGHTOPERAND[ESCAPEDVALUE["NAME"]] ; ] ; THENSTATEMENT[EXPRESSION[LEFTHANDSIDE[IDENTIFIER[actionName]] ; OPERATOR[=] ; RIGHTHANDSIDE[IDENTIFIER[value]]]] ; ELSESTATEMENT[EXPRESSION[LEFTOPERAND[IDENTIFIER[aname]] ; OPERATOR[==] ; RIGHTOPERAND[ESCAPEDVALUE["NO_REPEAT"]] ; ] ; THENSTATEMENT[EXPRESSION[LEFTHANDSIDE[IDENTIFIER[noRepeat]] ; OPERATOR[=] ; RIGHTHANDSIDE[EXPRESSION[LEFTOPERAND[IDENTIFIER[value]] ; OPERATOR[==] ; RIGHTOPERAND[ESCAPEDVALUE["TRUE"]] ; ]]]] ; ELSESTATEMENT[EXPRESSION[LEFTOPERAND[IDENTIFIER[aname]] ; OPERATOR[==] ; RIGHTOPERAND[ESCAPEDVALUE["NO_RECORD"]] ; ] ; THENSTATEMENT[EXPRESSION[LEFTHANDSIDE[IDENTIFIER[noRecord]] ; OPERATOR[=] ; RIGHTHANDSIDE[EXPRESSION[LEFTOPERAND[IDENTIFIER[value]] ; OPERATOR[==] ; RIGHTOPERAND[ESCAPEDVALUE["TRUE"]] ; ]]]] ; ELSESTATEMENT[EXPRESSION[LEFTOPERAND[IDENTIFIER[aname]] ; OPERATOR[==] ; RIGHTOPERAND[ESCAPEDVALUE["NO_REMEMBER_LAST"]] ; ] ; THENSTATEMENT[EXPRESSION[LEFTHANDSIDE[IDENTIFIER[noRememberLast]] ; OPERATOR[=] ; RIGHTHANDSIDE[EXPRESSION[LEFTOPERAND[IDENTIFIER[value]] ; OPERATOR[==] ; RIGHTOPERAND[ESCAPEDVALUE["TRUE"]] ; ]]]]]]], EXPRESSION[LEFTHANDSIDE[IDENTIFIER[aname]] ; OPERATOR[=] ; RIGHTHANDSIDE[EXPRESSION[EXPRESSION[LEFTOPERAND[IDENTIFIER[aname]] ; OPERATOR[==] ; ]] ; ELSEEXPRESSION[EXPRESSION[IDENTIFIER[aname]] ; NAME[IDENTIFIER[intern]] ; ]]], EXPRESSION[LEFTHANDSIDE[IDENTIFIER[value]] ; OPERATOR[=] ; RIGHTHANDSIDE[EXPRESSION[EXPRESSION[LEFTOPERAND[IDENTIFIER[value]] ; OPERATOR[==] ; ]] ; ELSEEXPRESSION[EXPRESSION[IDENTIFIER[value]] ; NAME[IDENTIFIER[intern]] ; ]]]]], MODIFIERS[KEYWORD[public]] ; CONSTRUCTOR[false] ; RETURNTYPE2[NAME[IDENTIFIER[Object]]] ; NAME[IDENTIFIER[resolveEntity]] ; PARAMETERS[TYPE[NAME[IDENTIFIER[String]]] ; VARARGS[false] ; NAME[IDENTIFIER[publicId]] ; EXTRADIMENSIONS[0], TYPE[NAME[IDENTIFIER[String]]] ; VARARGS[false] ; NAME[IDENTIFIER[systemId]] ; EXTRADIMENSIONS[0]] ; EXTRADIMENSIONS[0] ; BODY[STATEMENTS[EXPRESSION[EXPRESSION[ESCAPEDVALUE["actions.dtd"]] ; NAME[IDENTIFIER[equals]] ; ARGUMENTS[IDENTIFIER[systemId]]] ; THENSTATEMENT[STATEMENTS[EXPRESSION[TYPE[NAME[IDENTIFIER[StringReader]]] ; ARGUMENTS[ESCAPEDVALUE["<!-- -->"]]]]], ]], MODIFIERS[KEYWORD[public]] ; CONSTRUCTOR[false] ; RETURNTYPE2[PRIMITIVETYPECODE[void]] ; NAME[IDENTIFIER[endElement]] ; PARAMETERS[TYPE[NAME[IDENTIFIER[String]]] ; VARARGS[false] ; NAME[IDENTIFIER[name]] ; EXTRADIMENSIONS[0]] ; EXTRADIMENSIONS[0] ; BODY[STATEMENTS[TYPE[NAME[IDENTIFIER[String]]] ; FRAGMENTS[NAME[IDENTIFIER[tag]] ; EXTRADIMENSIONS[0] ; INITIALIZER[NAME[IDENTIFIER[peekElement]] ; ]], EXPRESSION[EXPRESSION[IDENTIFIER[name]] ; NAME[IDENTIFIER[equals]] ; ARGUMENTS[IDENTIFIER[tag]]] ; THENSTATEMENT[STATEMENTS[EXPRESSION[LEFTOPERAND[IDENTIFIER[tag]] ; OPERATOR[==] ; RIGHTOPERAND[ESCAPEDVALUE["ACTION"]] ; ] ; THENSTATEMENT[STATEMENTS[EXPRESSION[EXPRESSION[IDENTIFIER[actionSet]] ; NAME[IDENTIFIER[addAction]] ; ARGUMENTS[TYPE[NAME[IDENTIFIER[BeanShellAction]]] ; ARGUMENTS[IDENTIFIER[actionName], IDENTIFIER[code], IDENTIFIER[isSelected], IDENTIFIER[noRepeat], IDENTIFIER[noRecord], IDENTIFIER[noRememberLast]]]], EXPRESSION[LEFTHANDSIDE[IDENTIFIER[noRepeat]] ; OPERATOR[=] ; RIGHTHANDSIDE[LEFTHANDSIDE[IDENTIFIER[noRecord]] ; OPERATOR[=] ; RIGHTHANDSIDE[LEFTHANDSIDE[IDENTIFIER[noRememberLast]] ; OPERATOR[=] ; RIGHTHANDSIDE[BOOLEANVALUE[false]]]]]]], EXPRESSION[NAME[IDENTIFIER[popElement]] ; ]]] ; ELSESTATEMENT[STATEMENTS[EXPRESSION[TYPE[NAME[IDENTIFIER[InternalError]]] ; ]]], EXPRESSION[LEFTOPERAND[IDENTIFIER[name]] ; OPERATOR[==] ; ] ; ]], CONSTRUCTOR[true] ; NAME[IDENTIFIER[ActionListHandler]] ; PARAMETERS[TYPE[NAME[IDENTIFIER[String]]] ; VARARGS[false] ; NAME[IDENTIFIER[path]] ; EXTRADIMENSIONS[0], TYPE[NAME[IDENTIFIER[ActionSet]]] ; VARARGS[false] ; NAME[IDENTIFIER[actionSet]] ; EXTRADIMENSIONS[0]] ; EXTRADIMENSIONS[0] ; BODY[STATEMENTS[EXPRESSION[LEFTHANDSIDE[NAME[IDENTIFIER[path]]] ; OPERATOR[=] ; RIGHTHANDSIDE[IDENTIFIER[path]]], EXPRESSION[LEFTHANDSIDE[NAME[IDENTIFIER[actionSet]]] ; OPERATOR[=] ; RIGHTHANDSIDE[IDENTIFIER[actionSet]]], EXPRESSION[LEFTHANDSIDE[IDENTIFIER[stateStack]] ; OPERATOR[=] ; RIGHTHANDSIDE[TYPE[NAME[IDENTIFIER[Stack]]] ; ]]]], MODIFIERS[KEYWORD[private]] ; CONSTRUCTOR[false] ; RETURNTYPE2[NAME[IDENTIFIER[String]]] ; NAME[IDENTIFIER[pushElement]] ; PARAMETERS[TYPE[NAME[IDENTIFIER[String]]] ; VARARGS[false] ; NAME[IDENTIFIER[name]] ; EXTRADIMENSIONS[0]] ; EXTRADIMENSIONS[0] ; BODY[STATEMENTS[EXPRESSION[LEFTHANDSIDE[IDENTIFIER[name]] ; OPERATOR[=] ; RIGHTHANDSIDE[EXPRESSION[EXPRESSION[LEFTOPERAND[IDENTIFIER[name]] ; OPERATOR[==] ; ]] ; ELSEEXPRESSION[EXPRESSION[IDENTIFIER[name]] ; NAME[IDENTIFIER[intern]] ; ]]], EXPRESSION[EXPRESSION[IDENTIFIER[stateStack]] ; NAME[IDENTIFIER[push]] ; ARGUMENTS[IDENTIFIER[name]]], EXPRESSION[IDENTIFIER[name]]]], MODIFIERS[KEYWORD[public]] ; CONSTRUCTOR[false] ; RETURNTYPE2[PRIMITIVETYPECODE[void]] ; NAME[IDENTIFIER[startElement]] ; PARAMETERS[TYPE[NAME[IDENTIFIER[String]]] ; VARARGS[false] ; NAME[IDENTIFIER[tag]] ; EXTRADIMENSIONS[0]] ; EXTRADIMENSIONS[0] ; BODY[STATEMENTS[EXPRESSION[LEFTOPERAND[IDENTIFIER[tag]] ; OPERATOR[==] ; RIGHTOPERAND[ESCAPEDVALUE["ACTION"]] ; ] ; THENSTATEMENT[STATEMENTS[EXPRESSION[LEFTHANDSIDE[IDENTIFIER[code]] ; OPERATOR[=] ; ], EXPRESSION[LEFTHANDSIDE[IDENTIFIER[isSelected]] ; OPERATOR[=] ; ]]], EXPRESSION[LEFTHANDSIDE[IDENTIFIER[tag]] ; OPERATOR[=] ; RIGHTHANDSIDE[NAME[IDENTIFIER[pushElement]] ; ARGUMENTS[IDENTIFIER[tag]]]]]], MODIFIERS[KEYWORD[public]] ; CONSTRUCTOR[false] ; RETURNTYPE2[PRIMITIVETYPECODE[void]] ; NAME[IDENTIFIER[startDocument]] ; EXTRADIMENSIONS[0] ; BODY[STATEMENTS[BODY[STATEMENTS[EXPRESSION[NAME[IDENTIFIER[pushElement]] ; ]]] ; CATCHCLAUSES[EXCEPTION[TYPE[NAME[IDENTIFIER[Exception]]] ; VARARGS[false] ; NAME[IDENTIFIER[e]] ; EXTRADIMENSIONS[0]] ; BODY[STATEMENTS[EXPRESSION[EXPRESSION[IDENTIFIER[e]] ; NAME[IDENTIFIER[printStackTrace]] ; ]]]]]], MODIFIERS[KEYWORD[private]] ; CONSTRUCTOR[false] ; RETURNTYPE2[NAME[IDENTIFIER[String]]] ; NAME[IDENTIFIER[peekElement]] ; EXTRADIMENSIONS[0] ; BODY[STATEMENTS[EXPRESSION[TYPE[NAME[IDENTIFIER[String]]] ; EXPRESSION[EXPRESSION[IDENTIFIER[stateStack]] ; NAME[IDENTIFIER[peek]] ; ]]]], MODIFIERS[KEYWORD[private]] ; CONSTRUCTOR[false] ; RETURNTYPE2[NAME[IDENTIFIER[String]]] ; NAME[IDENTIFIER[popElement]] ; EXTRADIMENSIONS[0] ; BODY[STATEMENTS[EXPRESSION[TYPE[NAME[IDENTIFIER[String]]] ; EXPRESSION[EXPRESSION[IDENTIFIER[stateStack]] ; NAME[IDENTIFIER[pop]] ; ]]]], MODIFIERS[KEYWORD[private]] ; TYPE[NAME[IDENTIFIER[String]]] ; FRAGMENTS[NAME[IDENTIFIER[path]] ; EXTRADIMENSIONS[0]], MODIFIERS[KEYWORD[private]] ; TYPE[NAME[IDENTIFIER[ActionSet]]] ; FRAGMENTS[NAME[IDENTIFIER[actionSet]] ; EXTRADIMENSIONS[0]], MODIFIERS[KEYWORD[private]] ; TYPE[NAME[IDENTIFIER[String]]] ; FRAGMENTS[NAME[IDENTIFIER[actionName]] ; EXTRADIMENSIONS[0]], MODIFIERS[KEYWORD[private]] ; TYPE[NAME[IDENTIFIER[String]]] ; FRAGMENTS[NAME[IDENTIFIER[code]] ; EXTRADIMENSIONS[0]], MODIFIERS[KEYWORD[private]] ; TYPE[NAME[IDENTIFIER[String]]] ; FRAGMENTS[NAME[IDENTIFIER[isSelected]] ; EXTRADIMENSIONS[0]], MODIFIERS[KEYWORD[private]] ; TYPE[NAME[IDENTIFIER[Stack]]] ; FRAGMENTS[NAME[IDENTIFIER[stateStack]] ; EXTRADIMENSIONS[0]], MODIFIERS[KEYWORD[private]] ; TYPE[PRIMITIVETYPECODE[boolean]] ; FRAGMENTS[NAME[IDENTIFIER[noRepeat]] ; EXTRADIMENSIONS[0]], MODIFIERS[KEYWORD[private]] ; TYPE[PRIMITIVETYPECODE[boolean]] ; FRAGMENTS[NAME[IDENTIFIER[noRecord]] ; EXTRADIMENSIONS[0]], MODIFIERS[KEYWORD[private]] ; TYPE[PRIMITIVETYPECODE[boolean]] ; FRAGMENTS[NAME[IDENTIFIER[noRememberLast]] ; EXTRADIMENSIONS[0]]]]
****************************** SIMILARITY *****************************
1.0