********************************  NODE 1  *******************************
public class BufferHistory {
  public static Entry getEntry(  String path){
    Iterator iter=history.iterator();
    while (iter.hasNext()) {
      Entry entry=(Entry)iter.next();
      if (pathsCaseInsensitive) {
        if (entry.path.equalsIgnoreCase(path))         return entry;
      }
 else {
        if (entry.path.equals(path))         return entry;
      }
    }
    return null;
  }
  public static void setEntry(  String path,  int caret,  Selection[] selection,  String encoding){
    removeEntry(path);
    addEntry(new Entry(path,caret,selectionToString(selection),encoding));
    EditBus.send(new DynamicMenuChanged("recent-files"));
  }
  public static List getHistory(){
    return history;
  }
  public static Vector getBufferHistory(){
    Vector retVal=new Vector(history.size());
    Iterator iter=history.iterator();
    while (iter.hasNext())     retVal.add(iter.next());
    return retVal;
  }
  public static void load(){
    String settingsDirectory=jEdit.getSettingsDirectory();
    if (settingsDirectory == null)     return;
    File recent=new File(MiscUtilities.constructPath(settingsDirectory,"recent.xml"));
    if (!recent.exists())     return;
    recentModTime=recent.lastModified();
    RecentHandler handler=new RecentHandler();
    XmlParser parser=new XmlParser();
    Reader in=null;
    parser.setHandler(handler);
    try {
      in=new BufferedReader(new FileReader(recent));
      parser.parse(null,null,in);
    }
 catch (    XmlException xe) {
      int line=xe.getLine();
      String message=xe.getMessage();
    }
catch (    FileNotFoundException fnf) {
    }
catch (    Exception e) {
    }
 finally {
      try {
        if (in != null)         in.close();
      }
 catch (      IOException io) {
      }
    }
  }
  public static void save(){
    String settingsDirectory=jEdit.getSettingsDirectory();
    if (settingsDirectory == null)     return;
    File file1=new File(MiscUtilities.constructPath(settingsDirectory,"#recent.xml#save#"));
    File file2=new File(MiscUtilities.constructPath(settingsDirectory,"recent.xml"));
    if (file2.exists() && file2.lastModified() != recentModTime) {
      return;
    }
    jEdit.backupSettingsFile(file2);
    Log.log(Log.MESSAGE,BufferHistory.class,"Saving " + file1);
    String lineSep=System.getProperty("line.separator");
    boolean ok=false;
    BufferedWriter out=null;
    try {
      out=new BufferedWriter(new FileWriter(file1));
      out.write("<?xml version=\"1.0\"?>");
      out.write(lineSep);
      out.write("<!DOCTYPE RECENT SYSTEM \"recent.dtd\">");
      out.write(lineSep);
      out.write("<RECENT>");
      out.write(lineSep);
      Iterator iter=history.iterator();
      while (iter.hasNext()) {
        out.write("<ENTRY>");
        out.write(lineSep);
        Entry entry=(Entry)iter.next();
        out.write("<PATH>");
        out.write(MiscUtilities.charsToEntities(entry.path));
        out.write("</PATH>");
        out.write(lineSep);
        out.write("<CARET>");
        out.write(String.valueOf(entry.caret));
        out.write("</CARET>");
        out.write(lineSep);
        if (entry.selection != null && entry.selection.length() > 0) {
          out.write("<SELECTION>");
          out.write(entry.selection);
          out.write("</SELECTION>");
          out.write(lineSep);
        }
        if (entry.encoding != null) {
          out.write("<ENCODING>");
          out.write(entry.encoding);
          out.write("</ENCODING>");
          out.write(lineSep);
        }
        out.write("</ENTRY>");
        out.write(lineSep);
      }
      out.write("</RECENT>");
      out.write(lineSep);
      out.close();
      ok=true;
    }
 catch (    Exception e) {
    }
 finally {
      try {
        if (out != null)         out.close();
      }
 catch (      IOException e) {
      }
    }
    if (ok) {
      file2.delete();
      file1.renameTo(file2);
    }
    recentModTime=file2.lastModified();
  }
  private static LinkedList history;
  private static boolean pathsCaseInsensitive;
  private static long recentModTime;
static {
    history=new LinkedList();
    pathsCaseInsensitive=OperatingSystem.isDOSDerived() || OperatingSystem.isMacOS();
  }
  static void addEntry(  Entry entry){
    history.addFirst(entry);
    int max=jEdit.getIntegerProperty("recentFiles",50);
    while (history.size() > max)     history.removeLast();
  }
  static void removeEntry(  String path){
    Iterator iter=history.iterator();
    while (iter.hasNext()) {
      Entry entry=(Entry)iter.next();
      if (pathsCaseInsensitive) {
        if (entry.path.equalsIgnoreCase(path)) {
          iter.remove();
          return;
        }
      }
 else {
        if (entry.path.equals(path)) {
          iter.remove();
          return;
        }
      }
    }
  }
  private static String selectionToString(  Selection[] s){
    if (s == null)     return null;
    StringBuffer buf=new StringBuffer();
    for (int i=0; i < s.length; i++) {
      if (i != 0)       buf.append(' ');
      Selection sel=s[i];
      if (sel instanceof Selection.Range)       buf.append("range ");
 else       buf.append("rect ");
      buf.append(sel.getStart());
      buf.append(' ');
      buf.append(sel.getEnd());
    }
    return buf.toString();
  }
  private static Selection[] stringToSelection(  String s){
    if (s == null)     return null;
    Vector selection=new Vector();
    StringTokenizer st=new StringTokenizer(s);
    while (st.hasMoreTokens()) {
      String type=st.nextToken();
      int start=Integer.parseInt(st.nextToken());
      int end=Integer.parseInt(st.nextToken());
      if (end < start) {
        continue;
      }
      Selection sel;
      if (type.equals("range"))       sel=new Selection.Range(start,end);
 else       sel=new Selection.Rect(start,end);
      selection.addElement(sel);
    }
    Selection[] returnValue=new Selection[selection.size()];
    selection.copyInto(returnValue);
    return returnValue;
  }
public static class Entry {
    public String path;
    public int caret;
    public String selection;
    public String encoding;
    public Selection[] getSelection(){
      return stringToSelection(selection);
    }
    public Entry(    String path,    int caret,    String selection,    String encoding){
      this.path=path;
      this.caret=caret;
      this.selection=selection;
      this.encoding=encoding;
    }
    public String toString(){
      return path + ": " + caret;
    }
  }
static class RecentHandler extends HandlerBase {
    public void endDocument() throws java.lang.Exception {
      int max=jEdit.getIntegerProperty("recentFiles",50);
      while (history.size() > max)       history.removeLast();
    }
    public Object resolveEntity(    String publicId,    String systemId){
      if ("recent.dtd".equals(systemId)) {
        return new StringReader("<!-- -->");
      }
      return null;
    }
    public void doctypeDecl(    String name,    String publicId,    String systemId) throws Exception {
      if ("RECENT".equals(name))       return;
    }
    public void endElement(    String name){
      if (name.equals("ENTRY")) {
        history.addLast(new Entry(path,caret,selection,encoding));
        path=null;
        caret=0;
        selection=null;
        encoding=null;
      }
 else       if (name.equals("PATH"))       path=charData;
 else       if (name.equals("CARET"))       caret=Integer.parseInt(charData);
 else       if (name.equals("SELECTION"))       selection=charData;
 else       if (name.equals("ENCODING"))       encoding=charData;
    }
    public void charData(    char[] ch,    int start,    int length){
      charData=new String(ch,start,length);
    }
    private String path;
    private int caret;
    private String selection;
    private String encoding;
    private String charData;
  }
}
********************************  NODE 2  *******************************
public class BufferHistory {
  public static Entry getEntry(  String path){
    Iterator iter=history.iterator();
    while (iter.hasNext()) {
      Entry entry=(Entry)iter.next();
      if (pathsCaseInsensitive) {
        if (entry.path.equalsIgnoreCase(path))         return entry;
      }
 else {
        if (entry.path.equals(path))         return entry;
      }
    }
    return null;
  }
  public static void setEntry(  String path,  int caret,  Selection[] selection,  String encoding){
    removeEntry(path);
    addEntry(new Entry(path,caret,selectionToString(selection),encoding));
    EditBus.send(new DynamicMenuChanged("recent-files"));
  }
  public static List getHistory(){
    return history;
  }
  public static Vector getBufferHistory(){
    Vector retVal=new Vector(history.size());
    Iterator iter=history.iterator();
    while (iter.hasNext())     retVal.add(iter.next());
    return retVal;
  }
  public static void load(){
    String settingsDirectory=jEdit.getSettingsDirectory();
    if (settingsDirectory == null)     return;
    File recent=new File(MiscUtilities.constructPath(settingsDirectory,"recent.xml"));
    if (!recent.exists())     return;
    recentModTime=recent.lastModified();
    RecentHandler handler=new RecentHandler();
    XmlParser parser=new XmlParser();
    Reader in=null;
    parser.setHandler(handler);
    try {
      in=new BufferedReader(new FileReader(recent));
      parser.parse(null,null,in);
    }
 catch (    XmlException xe) {
      int line=xe.getLine();
      String message=xe.getMessage();
    }
catch (    FileNotFoundException fnf) {
    }
catch (    Exception e) {
    }
 finally {
      try {
        if (in != null)         in.close();
      }
 catch (      IOException io) {
      }
    }
  }
  public static void save(){
    String settingsDirectory=jEdit.getSettingsDirectory();
    if (settingsDirectory == null)     return;
    File file1=new File(MiscUtilities.constructPath(settingsDirectory,"#recent.xml#save#"));
    File file2=new File(MiscUtilities.constructPath(settingsDirectory,"recent.xml"));
    if (file2.exists() && file2.lastModified() != recentModTime) {
      return;
    }
    jEdit.backupSettingsFile(file2);
    String lineSep=System.getProperty("line.separator");
    boolean ok=false;
    BufferedWriter out=null;
    try {
      out=new BufferedWriter(new FileWriter(file1));
      out.write("<?xml version=\"1.0\"?>");
      out.write(lineSep);
      out.write("<!DOCTYPE RECENT SYSTEM \"recent.dtd\">");
      out.write(lineSep);
      out.write("<RECENT>");
      out.write(lineSep);
      Iterator iter=history.iterator();
      while (iter.hasNext()) {
        out.write("<ENTRY>");
        out.write(lineSep);
        Entry entry=(Entry)iter.next();
        out.write("<PATH>");
        out.write(MiscUtilities.charsToEntities(entry.path));
        out.write("</PATH>");
        out.write(lineSep);
        out.write("<CARET>");
        out.write(String.valueOf(entry.caret));
        out.write("</CARET>");
        out.write(lineSep);
        if (entry.selection != null && entry.selection.length() > 0) {
          out.write("<SELECTION>");
          out.write(entry.selection);
          out.write("</SELECTION>");
          out.write(lineSep);
        }
        if (entry.encoding != null) {
          out.write("<ENCODING>");
          out.write(entry.encoding);
          out.write("</ENCODING>");
          out.write(lineSep);
        }
        out.write("</ENTRY>");
        out.write(lineSep);
      }
      out.write("</RECENT>");
      out.write(lineSep);
      out.close();
      ok=true;
    }
 catch (    Exception e) {
      Log.log(Log.ERROR,BufferHistory.class,e);
    }
 finally {
      try {
        if (out != null)         out.close();
      }
 catch (      IOException e) {
      }
    }
    if (ok) {
      file2.delete();
      file1.renameTo(file2);
    }
    recentModTime=file2.lastModified();
  }
  private static LinkedList history;
  private static boolean pathsCaseInsensitive;
  private static long recentModTime;
static {
    history=new LinkedList();
    pathsCaseInsensitive=OperatingSystem.isDOSDerived() || OperatingSystem.isMacOS();
  }
  static void addEntry(  Entry entry){
    history.addFirst(entry);
    int max=jEdit.getIntegerProperty("recentFiles",50);
    while (history.size() > max)     history.removeLast();
  }
  static void removeEntry(  String path){
    Iterator iter=history.iterator();
    while (iter.hasNext()) {
      Entry entry=(Entry)iter.next();
      if (pathsCaseInsensitive) {
        if (entry.path.equalsIgnoreCase(path)) {
          iter.remove();
          return;
        }
      }
 else {
        if (entry.path.equals(path)) {
          iter.remove();
          return;
        }
      }
    }
  }
  private static String selectionToString(  Selection[] s){
    if (s == null)     return null;
    StringBuffer buf=new StringBuffer();
    for (int i=0; i < s.length; i++) {
      if (i != 0)       buf.append(' ');
      Selection sel=s[i];
      if (sel instanceof Selection.Range)       buf.append("range ");
 else       buf.append("rect ");
      buf.append(sel.getStart());
      buf.append(' ');
      buf.append(sel.getEnd());
    }
    return buf.toString();
  }
  private static Selection[] stringToSelection(  String s){
    if (s == null)     return null;
    Vector selection=new Vector();
    StringTokenizer st=new StringTokenizer(s);
    while (st.hasMoreTokens()) {
      String type=st.nextToken();
      int start=Integer.parseInt(st.nextToken());
      int end=Integer.parseInt(st.nextToken());
      if (end < start) {
        continue;
      }
      Selection sel;
      if (type.equals("range"))       sel=new Selection.Range(start,end);
 else       sel=new Selection.Rect(start,end);
      selection.addElement(sel);
    }
    Selection[] returnValue=new Selection[selection.size()];
    selection.copyInto(returnValue);
    return returnValue;
  }
public static class Entry {
    public String path;
    public int caret;
    public String selection;
    public String encoding;
    public Selection[] getSelection(){
      return stringToSelection(selection);
    }
    public Entry(    String path,    int caret,    String selection,    String encoding){
      this.path=path;
      this.caret=caret;
      this.selection=selection;
      this.encoding=encoding;
    }
    public String toString(){
      return path + ": " + caret;
    }
  }
static class RecentHandler extends HandlerBase {
    public void endDocument() throws java.lang.Exception {
      int max=jEdit.getIntegerProperty("recentFiles",50);
      while (history.size() > max)       history.removeLast();
    }
    public Object resolveEntity(    String publicId,    String systemId){
      if ("recent.dtd".equals(systemId)) {
        return new StringReader("<!-- -->");
      }
      return null;
    }
    public void doctypeDecl(    String name,    String publicId,    String systemId) throws Exception {
      if ("RECENT".equals(name))       return;
    }
    public void endElement(    String name){
      if (name.equals("ENTRY")) {
        history.addLast(new Entry(path,caret,selection,encoding));
        path=null;
        caret=0;
        selection=null;
        encoding=null;
      }
 else       if (name.equals("PATH"))       path=charData;
 else       if (name.equals("CARET"))       caret=Integer.parseInt(charData);
 else       if (name.equals("SELECTION"))       selection=charData;
 else       if (name.equals("ENCODING"))       encoding=charData;
    }
    public void charData(    char[] ch,    int start,    int length){
      charData=new String(ch,start,length);
    }
    private String path;
    private int caret;
    private String selection;
    private String encoding;
    private String charData;
  }
}
*****************************  ANTIUNIFIER  ****************************
TYPES[MODIFIERS[KEYWORD[public]] ; INTERFACE[false] ; NAME[IDENTIFIER[BufferHistory]] ; BODYDECLARATIONS[MODIFIERS[KEYWORD[static]] ; INTERFACE[false] ; NAME[IDENTIFIER[RecentHandler]] ; SUPERCLASSTYPE[NAME[IDENTIFIER[HandlerBase]]] ; BODYDECLARATIONS[MODIFIERS[KEYWORD[public]] ; CONSTRUCTOR[false] ; RETURNTYPE2[PRIMITIVETYPECODE[void]] ; NAME[IDENTIFIER[doctypeDecl]] ; PARAMETERS[TYPE[NAME[IDENTIFIER[String]]] ; VARARGS[false] ; NAME[IDENTIFIER[name]] ; EXTRADIMENSIONS[0], TYPE[NAME[IDENTIFIER[String]]] ; VARARGS[false] ; NAME[IDENTIFIER[publicId]] ; EXTRADIMENSIONS[0], TYPE[NAME[IDENTIFIER[String]]] ; VARARGS[false] ; NAME[IDENTIFIER[systemId]] ; EXTRADIMENSIONS[0]] ; EXTRADIMENSIONS[0] ; THROWNEXCEPTIONS[IDENTIFIER[Exception]] ; BODY[STATEMENTS[EXPRESSION[EXPRESSION[ESCAPEDVALUE["RECENT"]] ; NAME[IDENTIFIER[equals]] ; ARGUMENTS[IDENTIFIER[name]]] ; ]], MODIFIERS[KEYWORD[public]] ; CONSTRUCTOR[false] ; RETURNTYPE2[PRIMITIVETYPECODE[void]] ; NAME[IDENTIFIER[charData]] ; PARAMETERS[TYPE[COMPONENTTYPE[PRIMITIVETYPECODE[char]]] ; VARARGS[false] ; NAME[IDENTIFIER[ch]] ; EXTRADIMENSIONS[0], TYPE[PRIMITIVETYPECODE[int]] ; VARARGS[false] ; NAME[IDENTIFIER[start]] ; EXTRADIMENSIONS[0], TYPE[PRIMITIVETYPECODE[int]] ; VARARGS[false] ; NAME[IDENTIFIER[length]] ; EXTRADIMENSIONS[0]] ; EXTRADIMENSIONS[0] ; BODY[STATEMENTS[EXPRESSION[LEFTHANDSIDE[IDENTIFIER[charData]] ; OPERATOR[=] ; RIGHTHANDSIDE[TYPE[NAME[IDENTIFIER[String]]] ; ARGUMENTS[IDENTIFIER[ch], IDENTIFIER[start], IDENTIFIER[length]]]]]], MODIFIERS[KEYWORD[public]] ; CONSTRUCTOR[false] ; RETURNTYPE2[NAME[IDENTIFIER[Object]]] ; NAME[IDENTIFIER[resolveEntity]] ; PARAMETERS[TYPE[NAME[IDENTIFIER[String]]] ; VARARGS[false] ; NAME[IDENTIFIER[publicId]] ; EXTRADIMENSIONS[0], TYPE[NAME[IDENTIFIER[String]]] ; VARARGS[false] ; NAME[IDENTIFIER[systemId]] ; EXTRADIMENSIONS[0]] ; EXTRADIMENSIONS[0] ; BODY[STATEMENTS[EXPRESSION[EXPRESSION[ESCAPEDVALUE["recent.dtd"]] ; NAME[IDENTIFIER[equals]] ; ARGUMENTS[IDENTIFIER[systemId]]] ; THENSTATEMENT[STATEMENTS[EXPRESSION[TYPE[NAME[IDENTIFIER[StringReader]]] ; ARGUMENTS[ESCAPEDVALUE["<!-- -->"]]]]], ]], MODIFIERS[KEYWORD[public]] ; CONSTRUCTOR[false] ; RETURNTYPE2[PRIMITIVETYPECODE[void]] ; NAME[IDENTIFIER[endElement]] ; PARAMETERS[TYPE[NAME[IDENTIFIER[String]]] ; VARARGS[false] ; NAME[IDENTIFIER[name]] ; EXTRADIMENSIONS[0]] ; EXTRADIMENSIONS[0] ; BODY[STATEMENTS[EXPRESSION[EXPRESSION[IDENTIFIER[name]] ; NAME[IDENTIFIER[equals]] ; ARGUMENTS[ESCAPEDVALUE["ENTRY"]]] ; THENSTATEMENT[STATEMENTS[EXPRESSION[EXPRESSION[IDENTIFIER[history]] ; NAME[IDENTIFIER[addLast]] ; ARGUMENTS[TYPE[NAME[IDENTIFIER[Entry]]] ; ARGUMENTS[IDENTIFIER[path], IDENTIFIER[caret], IDENTIFIER[selection], IDENTIFIER[encoding]]]], EXPRESSION[LEFTHANDSIDE[IDENTIFIER[path]] ; OPERATOR[=] ; ], EXPRESSION[LEFTHANDSIDE[IDENTIFIER[caret]] ; OPERATOR[=] ; RIGHTHANDSIDE[TOKEN[0]]], EXPRESSION[LEFTHANDSIDE[IDENTIFIER[selection]] ; OPERATOR[=] ; ], EXPRESSION[LEFTHANDSIDE[IDENTIFIER[encoding]] ; OPERATOR[=] ; ]]] ; ELSESTATEMENT[EXPRESSION[EXPRESSION[IDENTIFIER[name]] ; NAME[IDENTIFIER[equals]] ; ARGUMENTS[ESCAPEDVALUE["PATH"]]] ; THENSTATEMENT[EXPRESSION[LEFTHANDSIDE[IDENTIFIER[path]] ; OPERATOR[=] ; RIGHTHANDSIDE[IDENTIFIER[charData]]]] ; ELSESTATEMENT[EXPRESSION[EXPRESSION[IDENTIFIER[name]] ; NAME[IDENTIFIER[equals]] ; ARGUMENTS[ESCAPEDVALUE["CARET"]]] ; THENSTATEMENT[EXPRESSION[LEFTHANDSIDE[IDENTIFIER[caret]] ; OPERATOR[=] ; RIGHTHANDSIDE[EXPRESSION[IDENTIFIER[Integer]] ; NAME[IDENTIFIER[parseInt]] ; ARGUMENTS[IDENTIFIER[charData]]]]] ; ELSESTATEMENT[EXPRESSION[EXPRESSION[IDENTIFIER[name]] ; NAME[IDENTIFIER[equals]] ; ARGUMENTS[ESCAPEDVALUE["SELECTION"]]] ; THENSTATEMENT[EXPRESSION[LEFTHANDSIDE[IDENTIFIER[selection]] ; OPERATOR[=] ; RIGHTHANDSIDE[IDENTIFIER[charData]]]] ; ELSESTATEMENT[EXPRESSION[EXPRESSION[IDENTIFIER[name]] ; NAME[IDENTIFIER[equals]] ; ARGUMENTS[ESCAPEDVALUE["ENCODING"]]] ; THENSTATEMENT[EXPRESSION[LEFTHANDSIDE[IDENTIFIER[encoding]] ; OPERATOR[=] ; RIGHTHANDSIDE[IDENTIFIER[charData]]]]]]]]]], MODIFIERS[KEYWORD[public]] ; CONSTRUCTOR[false] ; RETURNTYPE2[PRIMITIVETYPECODE[void]] ; NAME[IDENTIFIER[endDocument]] ; EXTRADIMENSIONS[0] ; THROWNEXCEPTIONS[QUALIFIER[QUALIFIER[IDENTIFIER[java]] ; NAME[IDENTIFIER[lang]]] ; NAME[IDENTIFIER[Exception]]] ; BODY[STATEMENTS[TYPE[PRIMITIVETYPECODE[int]] ; FRAGMENTS[NAME[IDENTIFIER[max]] ; EXTRADIMENSIONS[0] ; INITIALIZER[EXPRESSION[IDENTIFIER[jEdit]] ; NAME[IDENTIFIER[getIntegerProperty]] ; ARGUMENTS[ESCAPEDVALUE["recentFiles"], TOKEN[50]]]], EXPRESSION[LEFTOPERAND[EXPRESSION[IDENTIFIER[history]] ; NAME[IDENTIFIER[size]] ; ] ; OPERATOR[>] ; RIGHTOPERAND[IDENTIFIER[max]] ; ] ; BODY[EXPRESSION[EXPRESSION[IDENTIFIER[history]] ; NAME[IDENTIFIER[removeLast]] ; ]]]], MODIFIERS[KEYWORD[private]] ; TYPE[NAME[IDENTIFIER[String]]] ; FRAGMENTS[NAME[IDENTIFIER[path]] ; EXTRADIMENSIONS[0]], MODIFIERS[KEYWORD[private]] ; TYPE[NAME[IDENTIFIER[String]]] ; FRAGMENTS[NAME[IDENTIFIER[selection]] ; EXTRADIMENSIONS[0]], MODIFIERS[KEYWORD[private]] ; TYPE[NAME[IDENTIFIER[String]]] ; FRAGMENTS[NAME[IDENTIFIER[encoding]] ; EXTRADIMENSIONS[0]], MODIFIERS[KEYWORD[private]] ; TYPE[NAME[IDENTIFIER[String]]] ; FRAGMENTS[NAME[IDENTIFIER[charData]] ; EXTRADIMENSIONS[0]], MODIFIERS[KEYWORD[private]] ; TYPE[PRIMITIVETYPECODE[int]] ; FRAGMENTS[NAME[IDENTIFIER[caret]] ; EXTRADIMENSIONS[0]]], MODIFIERS[KEYWORD[public], KEYWORD[static]] ; INTERFACE[false] ; NAME[IDENTIFIER[Entry]] ; BODYDECLARATIONS[MODIFIERS[KEYWORD[public]] ; CONSTRUCTOR[true] ; NAME[IDENTIFIER[Entry]] ; PARAMETERS[TYPE[NAME[IDENTIFIER[String]]] ; VARARGS[false] ; NAME[IDENTIFIER[path]] ; EXTRADIMENSIONS[0], TYPE[NAME[IDENTIFIER[String]]] ; VARARGS[false] ; NAME[IDENTIFIER[selection]] ; EXTRADIMENSIONS[0], TYPE[NAME[IDENTIFIER[String]]] ; VARARGS[false] ; NAME[IDENTIFIER[encoding]] ; EXTRADIMENSIONS[0], TYPE[PRIMITIVETYPECODE[int]] ; VARARGS[false] ; NAME[IDENTIFIER[caret]] ; EXTRADIMENSIONS[0]] ; EXTRADIMENSIONS[0] ; BODY[STATEMENTS[EXPRESSION[LEFTHANDSIDE[NAME[IDENTIFIER[path]]] ; OPERATOR[=] ; RIGHTHANDSIDE[IDENTIFIER[path]]], EXPRESSION[LEFTHANDSIDE[NAME[IDENTIFIER[caret]]] ; OPERATOR[=] ; RIGHTHANDSIDE[IDENTIFIER[caret]]], EXPRESSION[LEFTHANDSIDE[NAME[IDENTIFIER[selection]]] ; OPERATOR[=] ; RIGHTHANDSIDE[IDENTIFIER[selection]]], EXPRESSION[LEFTHANDSIDE[NAME[IDENTIFIER[encoding]]] ; OPERATOR[=] ; RIGHTHANDSIDE[IDENTIFIER[encoding]]]]], MODIFIERS[KEYWORD[public]] ; CONSTRUCTOR[false] ; RETURNTYPE2[COMPONENTTYPE[NAME[IDENTIFIER[Selection]]]] ; NAME[IDENTIFIER[getSelection]] ; EXTRADIMENSIONS[0] ; BODY[STATEMENTS[EXPRESSION[NAME[IDENTIFIER[stringToSelection]] ; ARGUMENTS[IDENTIFIER[selection]]]]], MODIFIERS[KEYWORD[public]] ; CONSTRUCTOR[false] ; RETURNTYPE2[NAME[IDENTIFIER[String]]] ; NAME[IDENTIFIER[toString]] ; EXTRADIMENSIONS[0] ; BODY[STATEMENTS[EXPRESSION[LEFTOPERAND[IDENTIFIER[path]] ; OPERATOR[+] ; RIGHTOPERAND[ESCAPEDVALUE[": "]] ; EXTENDEDOPERANDS[IDENTIFIER[caret]]]]], MODIFIERS[KEYWORD[public]] ; TYPE[NAME[IDENTIFIER[String]]] ; FRAGMENTS[NAME[IDENTIFIER[path]] ; EXTRADIMENSIONS[0]], MODIFIERS[KEYWORD[public]] ; TYPE[NAME[IDENTIFIER[String]]] ; FRAGMENTS[NAME[IDENTIFIER[selection]] ; EXTRADIMENSIONS[0]], MODIFIERS[KEYWORD[public]] ; TYPE[NAME[IDENTIFIER[String]]] ; FRAGMENTS[NAME[IDENTIFIER[encoding]] ; EXTRADIMENSIONS[0]], MODIFIERS[KEYWORD[public]] ; TYPE[PRIMITIVETYPECODE[int]] ; FRAGMENTS[NAME[IDENTIFIER[caret]] ; EXTRADIMENSIONS[0]]], MODIFIERS[KEYWORD[private], KEYWORD[static]] ; CONSTRUCTOR[false] ; RETURNTYPE2[COMPONENTTYPE[NAME[IDENTIFIER[Selection]]]] ; NAME[IDENTIFIER[stringToSelection]] ; PARAMETERS[TYPE[NAME[IDENTIFIER[String]]] ; VARARGS[false] ; NAME[IDENTIFIER[s]] ; EXTRADIMENSIONS[0]] ; EXTRADIMENSIONS[0] ; BODY[STATEMENTS[EXPRESSION[EXPRESSION[IDENTIFIER[st]] ; NAME[IDENTIFIER[hasMoreTokens]] ; ] ; BODY[STATEMENTS[TYPE[PRIMITIVETYPECODE[int]] ; FRAGMENTS[NAME[IDENTIFIER[start]] ; EXTRADIMENSIONS[0] ; INITIALIZER[EXPRESSION[IDENTIFIER[Integer]] ; NAME[IDENTIFIER[parseInt]] ; ARGUMENTS[EXPRESSION[IDENTIFIER[st]] ; NAME[IDENTIFIER[nextToken]] ; ]]], TYPE[PRIMITIVETYPECODE[int]] ; FRAGMENTS[NAME[IDENTIFIER[end]] ; EXTRADIMENSIONS[0] ; INITIALIZER[EXPRESSION[IDENTIFIER[Integer]] ; NAME[IDENTIFIER[parseInt]] ; ARGUMENTS[EXPRESSION[IDENTIFIER[st]] ; NAME[IDENTIFIER[nextToken]] ; ]]], TYPE[NAME[IDENTIFIER[String]]] ; FRAGMENTS[NAME[IDENTIFIER[type]] ; EXTRADIMENSIONS[0] ; INITIALIZER[EXPRESSION[IDENTIFIER[st]] ; NAME[IDENTIFIER[nextToken]] ; ]], TYPE[NAME[IDENTIFIER[Selection]]] ; FRAGMENTS[NAME[IDENTIFIER[sel]] ; EXTRADIMENSIONS[0]], EXPRESSION[EXPRESSION[IDENTIFIER[type]] ; NAME[IDENTIFIER[equals]] ; ARGUMENTS[ESCAPEDVALUE["range"]]] ; THENSTATEMENT[EXPRESSION[LEFTHANDSIDE[IDENTIFIER[sel]] ; OPERATOR[=] ; RIGHTHANDSIDE[TYPE[NAME[QUALIFIER[IDENTIFIER[Selection]] ; NAME[IDENTIFIER[Range]]]] ; ARGUMENTS[IDENTIFIER[start], IDENTIFIER[end]]]]] ; ELSESTATEMENT[EXPRESSION[LEFTHANDSIDE[IDENTIFIER[sel]] ; OPERATOR[=] ; RIGHTHANDSIDE[TYPE[NAME[QUALIFIER[IDENTIFIER[Selection]] ; NAME[IDENTIFIER[Rect]]]] ; ARGUMENTS[IDENTIFIER[start], IDENTIFIER[end]]]]], EXPRESSION[LEFTOPERAND[IDENTIFIER[end]] ; OPERATOR[<] ; RIGHTOPERAND[IDENTIFIER[start]] ; ] ; , EXPRESSION[EXPRESSION[IDENTIFIER[selection]] ; NAME[IDENTIFIER[addElement]] ; ARGUMENTS[IDENTIFIER[sel]]]]], TYPE[COMPONENTTYPE[NAME[IDENTIFIER[Selection]]]] ; FRAGMENTS[NAME[IDENTIFIER[returnValue]] ; EXTRADIMENSIONS[0] ; INITIALIZER[TYPE[COMPONENTTYPE[NAME[IDENTIFIER[Selection]]]] ; DIMENSIONS[EXPRESSION[IDENTIFIER[selection]] ; NAME[IDENTIFIER[size]] ; ]]], TYPE[NAME[IDENTIFIER[StringTokenizer]]] ; FRAGMENTS[NAME[IDENTIFIER[st]] ; EXTRADIMENSIONS[0] ; INITIALIZER[TYPE[NAME[IDENTIFIER[StringTokenizer]]] ; ARGUMENTS[IDENTIFIER[s]]]], TYPE[NAME[IDENTIFIER[Vector]]] ; FRAGMENTS[NAME[IDENTIFIER[selection]] ; EXTRADIMENSIONS[0] ; INITIALIZER[TYPE[NAME[IDENTIFIER[Vector]]] ; ]], EXPRESSION[LEFTOPERAND[IDENTIFIER[s]] ; OPERATOR[==] ; ] ; , EXPRESSION[EXPRESSION[IDENTIFIER[selection]] ; NAME[IDENTIFIER[copyInto]] ; ARGUMENTS[IDENTIFIER[returnValue]]], EXPRESSION[IDENTIFIER[returnValue]]]], MODIFIERS[KEYWORD[public], KEYWORD[static]] ; CONSTRUCTOR[false] ; RETURNTYPE2[PRIMITIVETYPECODE[void]] ; NAME[IDENTIFIER[save]] ; EXTRADIMENSIONS[0] ; BODY[STATEMENTS[BODY-OR-NIL[STATEMENTS-OR-NIL[EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[iter-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[hasNext-or-nil]] ; ] ; BODY-OR-NIL[STATEMENTS-OR-NIL[TYPE-OR-NIL[NAME-OR-NIL[IDENTIFIER-OR-NIL[Entry-or-nil]]] ; FRAGMENTS-OR-NIL[NAME-OR-NIL[IDENTIFIER-OR-NIL[entry-or-nil]] ; EXTRADIMENSIONS-OR-NIL[0-or-nil] ; INITIALIZER-OR-NIL[TYPE-OR-NIL[NAME-OR-NIL[IDENTIFIER-OR-NIL[Entry-or-nil]]] ; EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[iter-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[next-or-nil]] ; ]]], EXPRESSION-OR-NIL[LEFTOPERAND-OR-NIL[LEFTOPERAND-OR-NIL[QUALIFIER-OR-NIL[IDENTIFIER-OR-NIL[entry-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[selection-or-nil]]] ; OPERATOR-OR-NIL[!=-or-nil] ; ] ; OPERATOR-OR-NIL[&&-or-nil] ; RIGHTOPERAND-OR-NIL[LEFTOPERAND-OR-NIL[EXPRESSION-OR-NIL[QUALIFIER-OR-NIL[IDENTIFIER-OR-NIL[entry-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[selection-or-nil]]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[length-or-nil]] ; ] ; OPERATOR-OR-NIL[>-or-nil] ; RIGHTOPERAND-OR-NIL[TOKEN-OR-NIL[0-or-nil]] ; ] ; ] ; THENSTATEMENT-OR-NIL[STATEMENTS-OR-NIL[EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[QUALIFIER-OR-NIL[IDENTIFIER-OR-NIL[entry-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[selection-or-nil]]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[ESCAPEDVALUE-OR-NIL["<SELECTION>"-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[ESCAPEDVALUE-OR-NIL["</SELECTION>"-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[IDENTIFIER-OR-NIL[lineSep-or-nil]]]]], EXPRESSION-OR-NIL[LEFTOPERAND-OR-NIL[QUALIFIER-OR-NIL[IDENTIFIER-OR-NIL[entry-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[encoding-or-nil]]] ; OPERATOR-OR-NIL[!=-or-nil] ; ] ; THENSTATEMENT-OR-NIL[STATEMENTS-OR-NIL[EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[QUALIFIER-OR-NIL[IDENTIFIER-OR-NIL[entry-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[encoding-or-nil]]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[ESCAPEDVALUE-OR-NIL["<ENCODING>"-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[ESCAPEDVALUE-OR-NIL["</ENCODING>"-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[IDENTIFIER-OR-NIL[lineSep-or-nil]]]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[MiscUtilities-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[charsToEntities-or-nil]] ; ARGUMENTS-OR-NIL[QUALIFIER-OR-NIL[IDENTIFIER-OR-NIL[entry-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[path-or-nil]]]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[String-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[valueOf-or-nil]] ; ARGUMENTS-OR-NIL[QUALIFIER-OR-NIL[IDENTIFIER-OR-NIL[entry-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[caret-or-nil]]]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[ESCAPEDVALUE-OR-NIL["<ENTRY>"-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[IDENTIFIER-OR-NIL[lineSep-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[ESCAPEDVALUE-OR-NIL["<PATH>"-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[ESCAPEDVALUE-OR-NIL["</PATH>"-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[IDENTIFIER-OR-NIL[lineSep-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[ESCAPEDVALUE-OR-NIL["<CARET>"-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[ESCAPEDVALUE-OR-NIL["</CARET>"-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[IDENTIFIER-OR-NIL[lineSep-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[ESCAPEDVALUE-OR-NIL["</ENTRY>"-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[IDENTIFIER-OR-NIL[lineSep-or-nil]]]]], TYPE-OR-NIL[NAME-OR-NIL[IDENTIFIER-OR-NIL[Iterator-or-nil]]] ; FRAGMENTS-OR-NIL[NAME-OR-NIL[IDENTIFIER-OR-NIL[iter-or-nil]] ; EXTRADIMENSIONS-OR-NIL[0-or-nil] ; INITIALIZER-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[history-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[iterator-or-nil]] ; ]], EXPRESSION-OR-NIL[LEFTHANDSIDE-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; OPERATOR-OR-NIL[=-or-nil] ; RIGHTHANDSIDE-OR-NIL[TYPE-OR-NIL[NAME-OR-NIL[IDENTIFIER-OR-NIL[BufferedWriter-or-nil]]] ; ARGUMENTS-OR-NIL[TYPE-OR-NIL[NAME-OR-NIL[IDENTIFIER-OR-NIL[FileWriter-or-nil]]] ; ARGUMENTS-OR-NIL[IDENTIFIER-OR-NIL[file1-or-nil]]]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[ESCAPEDVALUE-OR-NIL["<?xml version=\"1.0\"?>"-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[IDENTIFIER-OR-NIL[lineSep-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[ESCAPEDVALUE-OR-NIL["<!DOCTYPE RECENT SYSTEM \"recent.dtd\">"-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[IDENTIFIER-OR-NIL[lineSep-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[ESCAPEDVALUE-OR-NIL["<RECENT>"-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[IDENTIFIER-OR-NIL[lineSep-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[ESCAPEDVALUE-OR-NIL["</RECENT>"-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[IDENTIFIER-OR-NIL[lineSep-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[close-or-nil]] ; ], EXPRESSION-OR-NIL[LEFTHANDSIDE-OR-NIL[IDENTIFIER-OR-NIL[ok-or-nil]] ; OPERATOR-OR-NIL[=-or-nil] ; RIGHTHANDSIDE-OR-NIL[BOOLEANVALUE-OR-NIL[true-or-nil]]]]] ; CATCHCLAUSES-OR-NIL[EXCEPTION-OR-NIL[TYPE-OR-NIL[NAME-OR-NIL[IDENTIFIER-OR-NIL[Exception-or-nil]]] ; VARARGS-OR-NIL[false-or-nil] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[e-or-nil]] ; EXTRADIMENSIONS-OR-NIL[0-or-nil]] ; BODY-OR-NIL[STATEMENTS-OR-NIL[EXPRESSION[EXPRESSION[IDENTIFIER[Log]] ; NAME[IDENTIFIER[log]] ; ARGUMENTS[LEFTOPERAND-OR-NIL[ESCAPEDVALUE-OR-NIL["Saving "-or-nil]] ; OPERATOR-OR-NIL[+-or-nil] ; RIGHTOPERAND-OR-NIL[IDENTIFIER-OR-NIL[file1-or-nil]] ; , IDENTIFIER-OR-NIL[e-or-nil], QUALIFIER-OR-NIL[IDENTIFIER-OR-NIL[Log-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[ERROR-or-nil]], TYPE-OR-NIL[NAME-OR-NIL[IDENTIFIER-OR-NIL[BufferHistory-or-nil]]], QUALIFIER-OR-NIL[IDENTIFIER-OR-NIL[Log-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[MESSAGE-or-nil]], TYPE-OR-NIL[NAME-OR-NIL[IDENTIFIER-OR-NIL[BufferHistory-or-nil]]]]]]]] ; FINALLY-OR-NIL[STATEMENTS-OR-NIL[BODY-OR-NIL[STATEMENTS-OR-NIL[EXPRESSION-OR-NIL[LEFTOPERAND-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; OPERATOR-OR-NIL[!=-or-nil] ; ] ; THENSTATEMENT-OR-NIL[EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[close-or-nil]] ; ]]]] ; CATCHCLAUSES-OR-NIL[EXCEPTION-OR-NIL[TYPE-OR-NIL[NAME-OR-NIL[IDENTIFIER-OR-NIL[IOException-or-nil]]] ; VARARGS-OR-NIL[false-or-nil] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[e-or-nil]] ; EXTRADIMENSIONS-OR-NIL[0-or-nil]] ; ]]], BODY-OR-NIL[STATEMENTS-OR-NIL[EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[iter-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[hasNext-or-nil]] ; ] ; BODY-OR-NIL[STATEMENTS-OR-NIL[TYPE-OR-NIL[NAME-OR-NIL[IDENTIFIER-OR-NIL[Entry-or-nil]]] ; FRAGMENTS-OR-NIL[NAME-OR-NIL[IDENTIFIER-OR-NIL[entry-or-nil]] ; EXTRADIMENSIONS-OR-NIL[0-or-nil] ; INITIALIZER-OR-NIL[TYPE-OR-NIL[NAME-OR-NIL[IDENTIFIER-OR-NIL[Entry-or-nil]]] ; EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[iter-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[next-or-nil]] ; ]]], EXPRESSION-OR-NIL[LEFTOPERAND-OR-NIL[LEFTOPERAND-OR-NIL[QUALIFIER-OR-NIL[IDENTIFIER-OR-NIL[entry-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[selection-or-nil]]] ; OPERATOR-OR-NIL[!=-or-nil] ; ] ; OPERATOR-OR-NIL[&&-or-nil] ; RIGHTOPERAND-OR-NIL[LEFTOPERAND-OR-NIL[EXPRESSION-OR-NIL[QUALIFIER-OR-NIL[IDENTIFIER-OR-NIL[entry-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[selection-or-nil]]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[length-or-nil]] ; ] ; OPERATOR-OR-NIL[>-or-nil] ; RIGHTOPERAND-OR-NIL[TOKEN-OR-NIL[0-or-nil]] ; ] ; ] ; THENSTATEMENT-OR-NIL[STATEMENTS-OR-NIL[EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[QUALIFIER-OR-NIL[IDENTIFIER-OR-NIL[entry-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[selection-or-nil]]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[ESCAPEDVALUE-OR-NIL["<SELECTION>"-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[ESCAPEDVALUE-OR-NIL["</SELECTION>"-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[IDENTIFIER-OR-NIL[lineSep-or-nil]]]]], EXPRESSION-OR-NIL[LEFTOPERAND-OR-NIL[QUALIFIER-OR-NIL[IDENTIFIER-OR-NIL[entry-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[encoding-or-nil]]] ; OPERATOR-OR-NIL[!=-or-nil] ; ] ; THENSTATEMENT-OR-NIL[STATEMENTS-OR-NIL[EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[QUALIFIER-OR-NIL[IDENTIFIER-OR-NIL[entry-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[encoding-or-nil]]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[ESCAPEDVALUE-OR-NIL["<ENCODING>"-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[ESCAPEDVALUE-OR-NIL["</ENCODING>"-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[IDENTIFIER-OR-NIL[lineSep-or-nil]]]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[MiscUtilities-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[charsToEntities-or-nil]] ; ARGUMENTS-OR-NIL[QUALIFIER-OR-NIL[IDENTIFIER-OR-NIL[entry-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[path-or-nil]]]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[String-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[valueOf-or-nil]] ; ARGUMENTS-OR-NIL[QUALIFIER-OR-NIL[IDENTIFIER-OR-NIL[entry-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[caret-or-nil]]]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[ESCAPEDVALUE-OR-NIL["<ENTRY>"-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[IDENTIFIER-OR-NIL[lineSep-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[ESCAPEDVALUE-OR-NIL["<PATH>"-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[ESCAPEDVALUE-OR-NIL["</PATH>"-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[IDENTIFIER-OR-NIL[lineSep-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[ESCAPEDVALUE-OR-NIL["<CARET>"-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[ESCAPEDVALUE-OR-NIL["</CARET>"-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[IDENTIFIER-OR-NIL[lineSep-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[ESCAPEDVALUE-OR-NIL["</ENTRY>"-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[IDENTIFIER-OR-NIL[lineSep-or-nil]]]]], TYPE-OR-NIL[NAME-OR-NIL[IDENTIFIER-OR-NIL[Iterator-or-nil]]] ; FRAGMENTS-OR-NIL[NAME-OR-NIL[IDENTIFIER-OR-NIL[iter-or-nil]] ; EXTRADIMENSIONS-OR-NIL[0-or-nil] ; INITIALIZER-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[history-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[iterator-or-nil]] ; ]], EXPRESSION-OR-NIL[LEFTHANDSIDE-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; OPERATOR-OR-NIL[=-or-nil] ; RIGHTHANDSIDE-OR-NIL[TYPE-OR-NIL[NAME-OR-NIL[IDENTIFIER-OR-NIL[BufferedWriter-or-nil]]] ; ARGUMENTS-OR-NIL[TYPE-OR-NIL[NAME-OR-NIL[IDENTIFIER-OR-NIL[FileWriter-or-nil]]] ; ARGUMENTS-OR-NIL[IDENTIFIER-OR-NIL[file1-or-nil]]]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[ESCAPEDVALUE-OR-NIL["<?xml version=\"1.0\"?>"-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[IDENTIFIER-OR-NIL[lineSep-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[ESCAPEDVALUE-OR-NIL["<!DOCTYPE RECENT SYSTEM \"recent.dtd\">"-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[IDENTIFIER-OR-NIL[lineSep-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[ESCAPEDVALUE-OR-NIL["<RECENT>"-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[IDENTIFIER-OR-NIL[lineSep-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[ESCAPEDVALUE-OR-NIL["</RECENT>"-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[write-or-nil]] ; ARGUMENTS-OR-NIL[IDENTIFIER-OR-NIL[lineSep-or-nil]]], EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[close-or-nil]] ; ], EXPRESSION-OR-NIL[LEFTHANDSIDE-OR-NIL[IDENTIFIER-OR-NIL[ok-or-nil]] ; OPERATOR-OR-NIL[=-or-nil] ; RIGHTHANDSIDE-OR-NIL[BOOLEANVALUE-OR-NIL[true-or-nil]]]]] ; CATCHCLAUSES-OR-NIL[EXCEPTION-OR-NIL[TYPE-OR-NIL[NAME-OR-NIL[IDENTIFIER-OR-NIL[Exception-or-nil]]] ; VARARGS-OR-NIL[false-or-nil] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[e-or-nil]] ; EXTRADIMENSIONS-OR-NIL[0-or-nil]] ; ] ; FINALLY-OR-NIL[STATEMENTS-OR-NIL[BODY-OR-NIL[STATEMENTS-OR-NIL[EXPRESSION-OR-NIL[LEFTOPERAND-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; OPERATOR-OR-NIL[!=-or-nil] ; ] ; THENSTATEMENT-OR-NIL[EXPRESSION-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[out-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[close-or-nil]] ; ]]]] ; CATCHCLAUSES-OR-NIL[EXCEPTION-OR-NIL[TYPE-OR-NIL[NAME-OR-NIL[IDENTIFIER-OR-NIL[IOException-or-nil]]] ; VARARGS-OR-NIL[false-or-nil] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[e-or-nil]] ; EXTRADIMENSIONS-OR-NIL[0-or-nil]] ; ]]], TYPE[NAME[IDENTIFIER[File]]] ; FRAGMENTS[NAME[IDENTIFIER[file1]] ; EXTRADIMENSIONS[0] ; INITIALIZER[TYPE[NAME[IDENTIFIER[File]]] ; ARGUMENTS[EXPRESSION[IDENTIFIER[MiscUtilities]] ; NAME[IDENTIFIER[constructPath]] ; ARGUMENTS[IDENTIFIER[settingsDirectory], ESCAPEDVALUE["#recent.xml#save#"]]]]], TYPE[NAME[IDENTIFIER[File]]] ; FRAGMENTS[NAME[IDENTIFIER[file2]] ; EXTRADIMENSIONS[0] ; INITIALIZER[TYPE[NAME[IDENTIFIER[File]]] ; ARGUMENTS[EXPRESSION[IDENTIFIER[MiscUtilities]] ; NAME[IDENTIFIER[constructPath]] ; ARGUMENTS[IDENTIFIER[settingsDirectory], ESCAPEDVALUE["recent.xml"]]]]], TYPE[NAME[IDENTIFIER[String]]] ; FRAGMENTS[NAME[IDENTIFIER[lineSep]] ; EXTRADIMENSIONS[0] ; INITIALIZER[EXPRESSION[IDENTIFIER[System]] ; NAME[IDENTIFIER[getProperty]] ; ARGUMENTS[ESCAPEDVALUE["line.separator"]]]], TYPE[NAME[IDENTIFIER[String]]] ; FRAGMENTS[NAME[IDENTIFIER[settingsDirectory]] ; EXTRADIMENSIONS[0] ; INITIALIZER[EXPRESSION[IDENTIFIER[jEdit]] ; NAME[IDENTIFIER[getSettingsDirectory]] ; ]], TYPE[NAME[IDENTIFIER[BufferedWriter]]] ; FRAGMENTS[NAME[IDENTIFIER[out]] ; EXTRADIMENSIONS[0] ; ], TYPE[PRIMITIVETYPECODE[boolean]] ; FRAGMENTS[NAME[IDENTIFIER[ok]] ; EXTRADIMENSIONS[0] ; INITIALIZER[BOOLEANVALUE[false]]], EXPRESSION[LEFTOPERAND[EXPRESSION[IDENTIFIER[file2]] ; NAME[IDENTIFIER[exists]] ; ] ; OPERATOR[&&] ; RIGHTOPERAND[LEFTOPERAND[EXPRESSION[IDENTIFIER[file2]] ; NAME[IDENTIFIER[lastModified]] ; ] ; OPERATOR[!=] ; RIGHTOPERAND[IDENTIFIER[recentModTime]] ; ] ; ] ; , EXPRESSION[IDENTIFIER[ok]] ; THENSTATEMENT[STATEMENTS[EXPRESSION[EXPRESSION[IDENTIFIER[file1]] ; NAME[IDENTIFIER[renameTo]] ; ARGUMENTS[IDENTIFIER[file2]]], EXPRESSION[EXPRESSION[IDENTIFIER[file2]] ; NAME[IDENTIFIER[delete]] ; ]]], EXPRESSION[LEFTHANDSIDE[IDENTIFIER[recentModTime]] ; OPERATOR[=] ; RIGHTHANDSIDE[EXPRESSION[IDENTIFIER[file2]] ; NAME[IDENTIFIER[lastModified]] ; ]], EXPRESSION[LEFTOPERAND[IDENTIFIER[settingsDirectory]] ; OPERATOR[==] ; ] ; , EXPRESSION[EXPRESSION[IDENTIFIER[jEdit]] ; NAME[IDENTIFIER[backupSettingsFile]] ; ARGUMENTS[IDENTIFIER[file2]]]]], MODIFIERS[KEYWORD[public], KEYWORD[static]] ; CONSTRUCTOR[false] ; RETURNTYPE2[PRIMITIVETYPECODE[void]] ; NAME[IDENTIFIER[setEntry]] ; PARAMETERS[TYPE[COMPONENTTYPE[NAME[IDENTIFIER[Selection]]]] ; VARARGS[false] ; NAME[IDENTIFIER[selection]] ; EXTRADIMENSIONS[0], TYPE[NAME[IDENTIFIER[String]]] ; VARARGS[false] ; NAME[IDENTIFIER[path]] ; EXTRADIMENSIONS[0], TYPE[NAME[IDENTIFIER[String]]] ; VARARGS[false] ; NAME[IDENTIFIER[encoding]] ; EXTRADIMENSIONS[0], TYPE[PRIMITIVETYPECODE[int]] ; VARARGS[false] ; NAME[IDENTIFIER[caret]] ; EXTRADIMENSIONS[0]] ; EXTRADIMENSIONS[0] ; BODY[STATEMENTS[EXPRESSION[NAME[IDENTIFIER[addEntry]] ; ARGUMENTS[TYPE[NAME[IDENTIFIER[Entry]]] ; ARGUMENTS[NAME[IDENTIFIER[selectionToString]] ; ARGUMENTS[IDENTIFIER[selection]], IDENTIFIER[path], IDENTIFIER[caret], IDENTIFIER[encoding]]]], EXPRESSION[EXPRESSION[IDENTIFIER[EditBus]] ; NAME[IDENTIFIER[send]] ; ARGUMENTS[TYPE[NAME[IDENTIFIER[DynamicMenuChanged]]] ; ARGUMENTS[ESCAPEDVALUE["recent-files"]]]], EXPRESSION[NAME[IDENTIFIER[removeEntry]] ; ARGUMENTS[IDENTIFIER[path]]]]], MODIFIERS[KEYWORD[public], KEYWORD[static]] ; CONSTRUCTOR[false] ; RETURNTYPE2[PRIMITIVETYPECODE[void]] ; NAME[IDENTIFIER[load]] ; EXTRADIMENSIONS[0] ; BODY[STATEMENTS[BODY[STATEMENTS[EXPRESSION[LEFTHANDSIDE[IDENTIFIER[in]] ; OPERATOR[=] ; RIGHTHANDSIDE[TYPE[NAME[IDENTIFIER[BufferedReader]]] ; ARGUMENTS[TYPE[NAME[IDENTIFIER[FileReader]]] ; ARGUMENTS[IDENTIFIER[recent]]]]], EXPRESSION[EXPRESSION[IDENTIFIER[parser]] ; NAME[IDENTIFIER[parse]] ; ARGUMENTS[IDENTIFIER[in], , ]]]] ; CATCHCLAUSES[EXCEPTION[TYPE[NAME[IDENTIFIER[XmlException]]] ; VARARGS[false] ; NAME[IDENTIFIER[xe]] ; EXTRADIMENSIONS[0]] ; BODY[STATEMENTS[TYPE[NAME[IDENTIFIER[String]]] ; FRAGMENTS[NAME[IDENTIFIER[message]] ; EXTRADIMENSIONS[0] ; INITIALIZER[EXPRESSION[IDENTIFIER[xe]] ; NAME[IDENTIFIER[getMessage]] ; ]], TYPE[PRIMITIVETYPECODE[int]] ; FRAGMENTS[NAME[IDENTIFIER[line]] ; EXTRADIMENSIONS[0] ; INITIALIZER[EXPRESSION[IDENTIFIER[xe]] ; NAME[IDENTIFIER[getLine]] ; ]]]], EXCEPTION[TYPE[NAME[IDENTIFIER[FileNotFoundException]]] ; VARARGS[false] ; NAME[IDENTIFIER[fnf]] ; EXTRADIMENSIONS[0]] ; , EXCEPTION[TYPE[NAME[IDENTIFIER[Exception]]] ; VARARGS[false] ; NAME[IDENTIFIER[e]] ; EXTRADIMENSIONS[0]] ; ] ; FINALLY[STATEMENTS[BODY[STATEMENTS[EXPRESSION[LEFTOPERAND[IDENTIFIER[in]] ; OPERATOR[!=] ; ] ; THENSTATEMENT[EXPRESSION[EXPRESSION[IDENTIFIER[in]] ; NAME[IDENTIFIER[close]] ; ]]]] ; CATCHCLAUSES[EXCEPTION[TYPE[NAME[IDENTIFIER[IOException]]] ; VARARGS[false] ; NAME[IDENTIFIER[io]] ; EXTRADIMENSIONS[0]] ; ]]], TYPE[NAME[IDENTIFIER[File]]] ; FRAGMENTS[NAME[IDENTIFIER[recent]] ; EXTRADIMENSIONS[0] ; INITIALIZER[TYPE[NAME[IDENTIFIER[File]]] ; ARGUMENTS[EXPRESSION[IDENTIFIER[MiscUtilities]] ; NAME[IDENTIFIER[constructPath]] ; ARGUMENTS[IDENTIFIER[settingsDirectory], ESCAPEDVALUE["recent.xml"]]]]], TYPE[NAME[IDENTIFIER[String]]] ; FRAGMENTS[NAME[IDENTIFIER[settingsDirectory]] ; EXTRADIMENSIONS[0] ; INITIALIZER[EXPRESSION[IDENTIFIER[jEdit]] ; NAME[IDENTIFIER[getSettingsDirectory]] ; ]], TYPE[NAME[IDENTIFIER[RecentHandler]]] ; FRAGMENTS[NAME[IDENTIFIER[handler]] ; EXTRADIMENSIONS[0] ; INITIALIZER[TYPE[NAME[IDENTIFIER[RecentHandler]]] ; ]], TYPE[NAME[IDENTIFIER[XmlParser]]] ; FRAGMENTS[NAME[IDENTIFIER[parser]] ; EXTRADIMENSIONS[0] ; INITIALIZER[TYPE[NAME[IDENTIFIER[XmlParser]]] ; ]], TYPE[NAME[IDENTIFIER[Reader]]] ; FRAGMENTS[NAME[IDENTIFIER[in]] ; EXTRADIMENSIONS[0] ; ], EXPRESSION[OPERATOR[!] ; OPERAND[EXPRESSION[IDENTIFIER[recent]] ; NAME[IDENTIFIER[exists]] ; ]] ; , EXPRESSION[LEFTHANDSIDE[IDENTIFIER[recentModTime]] ; OPERATOR[=] ; RIGHTHANDSIDE[EXPRESSION[IDENTIFIER[recent]] ; NAME[IDENTIFIER[lastModified]] ; ]], EXPRESSION[LEFTOPERAND[IDENTIFIER[settingsDirectory]] ; OPERATOR[==] ; ] ; , EXPRESSION[EXPRESSION[IDENTIFIER[parser]] ; NAME[IDENTIFIER[setHandler]] ; ARGUMENTS[IDENTIFIER[handler]]]]], MODIFIERS[KEYWORD[private], KEYWORD[static]] ; CONSTRUCTOR[false] ; RETURNTYPE2[NAME[IDENTIFIER[String]]] ; NAME[IDENTIFIER[selectionToString]] ; PARAMETERS[TYPE[COMPONENTTYPE[NAME[IDENTIFIER[Selection]]]] ; VARARGS[false] ; NAME[IDENTIFIER[s]] ; EXTRADIMENSIONS[0]] ; EXTRADIMENSIONS[0] ; BODY[STATEMENTS[INITIALIZERS[TYPE[PRIMITIVETYPECODE[int]] ; FRAGMENTS[NAME[IDENTIFIER[i]] ; EXTRADIMENSIONS[0] ; INITIALIZER[TOKEN[0]]]] ; EXPRESSION[LEFTOPERAND[IDENTIFIER[i]] ; OPERATOR[<] ; RIGHTOPERAND[QUALIFIER[IDENTIFIER[s]] ; NAME[IDENTIFIER[length]]] ; ] ; UPDATERS[OPERAND[IDENTIFIER[i]] ; OPERATOR[++]] ; BODY[STATEMENTS[TYPE[NAME[IDENTIFIER[Selection]]] ; FRAGMENTS[NAME[IDENTIFIER[sel]] ; EXTRADIMENSIONS[0] ; INITIALIZER[ARRAY[IDENTIFIER[s]] ; INDEX[IDENTIFIER[i]]]], EXPRESSION[LEFTOPERAND[IDENTIFIER[sel]] ; RIGHTOPERAND[NAME[QUALIFIER[IDENTIFIER[Selection]] ; NAME[IDENTIFIER[Range]]]]] ; THENSTATEMENT[EXPRESSION[EXPRESSION[IDENTIFIER[buf]] ; NAME[IDENTIFIER[append]] ; ARGUMENTS[ESCAPEDVALUE["range "]]]] ; ELSESTATEMENT[EXPRESSION[EXPRESSION[IDENTIFIER[buf]] ; NAME[IDENTIFIER[append]] ; ARGUMENTS[ESCAPEDVALUE["rect "]]]], EXPRESSION[LEFTOPERAND[IDENTIFIER[i]] ; OPERATOR[!=] ; RIGHTOPERAND[TOKEN[0]] ; ] ; THENSTATEMENT[EXPRESSION[EXPRESSION[IDENTIFIER[buf]] ; NAME[IDENTIFIER[append]] ; ARGUMENTS[ESCAPEDVALUE[' ']]]], EXPRESSION[EXPRESSION[IDENTIFIER[buf]] ; NAME[IDENTIFIER[append]] ; ARGUMENTS[EXPRESSION[IDENTIFIER[sel]] ; NAME[IDENTIFIER[getStart]] ; ]], EXPRESSION[EXPRESSION[IDENTIFIER[buf]] ; NAME[IDENTIFIER[append]] ; ARGUMENTS[EXPRESSION[IDENTIFIER[sel]] ; NAME[IDENTIFIER[getEnd]] ; ]], EXPRESSION[EXPRESSION[IDENTIFIER[buf]] ; NAME[IDENTIFIER[append]] ; ARGUMENTS[ESCAPEDVALUE[' ']]]]], TYPE[NAME[IDENTIFIER[StringBuffer]]] ; FRAGMENTS[NAME[IDENTIFIER[buf]] ; EXTRADIMENSIONS[0] ; INITIALIZER[TYPE[NAME[IDENTIFIER[StringBuffer]]] ; ]], EXPRESSION[LEFTOPERAND[IDENTIFIER[s]] ; OPERATOR[==] ; ] ; , EXPRESSION[EXPRESSION[IDENTIFIER[buf]] ; NAME[IDENTIFIER[toString]] ; ]]], MODIFIERS[KEYWORD[public], KEYWORD[static]] ; CONSTRUCTOR[false] ; RETURNTYPE2[NAME[IDENTIFIER[Entry]]] ; NAME[IDENTIFIER[getEntry]] ; PARAMETERS[TYPE[NAME[IDENTIFIER[String]]] ; VARARGS[false] ; NAME[IDENTIFIER[path]] ; EXTRADIMENSIONS[0]] ; EXTRADIMENSIONS[0] ; BODY[STATEMENTS[EXPRESSION[EXPRESSION[IDENTIFIER[iter]] ; NAME[IDENTIFIER[hasNext]] ; ] ; BODY[STATEMENTS[TYPE[NAME[IDENTIFIER[Entry]]] ; FRAGMENTS[NAME[IDENTIFIER[entry]] ; EXTRADIMENSIONS[0] ; INITIALIZER[TYPE[NAME[IDENTIFIER[Entry]]] ; EXPRESSION[EXPRESSION[IDENTIFIER[iter]] ; NAME[IDENTIFIER[next]] ; ]]], EXPRESSION[IDENTIFIER[pathsCaseInsensitive]] ; THENSTATEMENT[STATEMENTS[EXPRESSION[EXPRESSION[QUALIFIER[IDENTIFIER[entry]] ; NAME[IDENTIFIER[path]]] ; NAME[IDENTIFIER[equalsIgnoreCase]] ; ARGUMENTS[IDENTIFIER[path]]] ; THENSTATEMENT[EXPRESSION[IDENTIFIER[entry]]]]] ; ELSESTATEMENT[STATEMENTS[EXPRESSION[EXPRESSION[QUALIFIER[IDENTIFIER[entry]] ; NAME[IDENTIFIER[path]]] ; NAME[IDENTIFIER[equals]] ; ARGUMENTS[IDENTIFIER[path]]] ; THENSTATEMENT[EXPRESSION[IDENTIFIER[entry]]]]]]], TYPE[NAME[IDENTIFIER[Iterator]]] ; FRAGMENTS[NAME[IDENTIFIER[iter]] ; EXTRADIMENSIONS[0] ; INITIALIZER[EXPRESSION[IDENTIFIER[history]] ; NAME[IDENTIFIER[iterator]] ; ]], ]], MODIFIERS[KEYWORD[static]] ; CONSTRUCTOR[false] ; RETURNTYPE2[PRIMITIVETYPECODE[void]] ; NAME[IDENTIFIER[removeEntry]] ; PARAMETERS[TYPE[NAME[IDENTIFIER[String]]] ; VARARGS[false] ; NAME[IDENTIFIER[path]] ; EXTRADIMENSIONS[0]] ; EXTRADIMENSIONS[0] ; BODY[STATEMENTS[EXPRESSION[EXPRESSION[IDENTIFIER[iter]] ; NAME[IDENTIFIER[hasNext]] ; ] ; BODY[STATEMENTS[TYPE[NAME[IDENTIFIER[Entry]]] ; FRAGMENTS[NAME[IDENTIFIER[entry]] ; EXTRADIMENSIONS[0] ; INITIALIZER[TYPE[NAME[IDENTIFIER[Entry]]] ; EXPRESSION[EXPRESSION[IDENTIFIER[iter]] ; NAME[IDENTIFIER[next]] ; ]]], EXPRESSION[IDENTIFIER[pathsCaseInsensitive]] ; THENSTATEMENT[STATEMENTS[EXPRESSION[EXPRESSION[QUALIFIER[IDENTIFIER[entry]] ; NAME[IDENTIFIER[path]]] ; NAME[IDENTIFIER[equalsIgnoreCase]] ; ARGUMENTS[IDENTIFIER[path]]] ; THENSTATEMENT[STATEMENTS[EXPRESSION[EXPRESSION[IDENTIFIER[iter]] ; NAME[IDENTIFIER[remove]] ; ], ]]]] ; ELSESTATEMENT[STATEMENTS[EXPRESSION[EXPRESSION[QUALIFIER[IDENTIFIER[entry]] ; NAME[IDENTIFIER[path]]] ; NAME[IDENTIFIER[equals]] ; ARGUMENTS[IDENTIFIER[path]]] ; THENSTATEMENT[STATEMENTS[EXPRESSION[EXPRESSION[IDENTIFIER[iter]] ; NAME[IDENTIFIER[remove]] ; ], ]]]]]], TYPE[NAME[IDENTIFIER[Iterator]]] ; FRAGMENTS[NAME[IDENTIFIER[iter]] ; EXTRADIMENSIONS[0] ; INITIALIZER[EXPRESSION[IDENTIFIER[history]] ; NAME[IDENTIFIER[iterator]] ; ]]]], MODIFIERS[KEYWORD[public], KEYWORD[static]] ; CONSTRUCTOR[false] ; RETURNTYPE2[NAME[IDENTIFIER[Vector]]] ; NAME[IDENTIFIER[getBufferHistory]] ; EXTRADIMENSIONS[0] ; BODY[STATEMENTS[TYPE[NAME[IDENTIFIER[Vector]]] ; FRAGMENTS[NAME[IDENTIFIER[retVal]] ; EXTRADIMENSIONS[0] ; INITIALIZER[TYPE[NAME[IDENTIFIER[Vector]]] ; ARGUMENTS[EXPRESSION[IDENTIFIER[history]] ; NAME[IDENTIFIER[size]] ; ]]], TYPE[NAME[IDENTIFIER[Iterator]]] ; FRAGMENTS[NAME[IDENTIFIER[iter]] ; EXTRADIMENSIONS[0] ; INITIALIZER[EXPRESSION[IDENTIFIER[history]] ; NAME[IDENTIFIER[iterator]] ; ]], EXPRESSION[EXPRESSION[IDENTIFIER[iter]] ; NAME[IDENTIFIER[hasNext]] ; ] ; BODY[EXPRESSION[EXPRESSION[IDENTIFIER[retVal]] ; NAME[IDENTIFIER[add]] ; ARGUMENTS[EXPRESSION[IDENTIFIER[iter]] ; NAME[IDENTIFIER[next]] ; ]]], EXPRESSION[IDENTIFIER[retVal]]]], MODIFIERS[KEYWORD[static]] ; CONSTRUCTOR[false] ; RETURNTYPE2[PRIMITIVETYPECODE[void]] ; NAME[IDENTIFIER[addEntry]] ; PARAMETERS[TYPE[NAME[IDENTIFIER[Entry]]] ; VARARGS[false] ; NAME[IDENTIFIER[entry]] ; EXTRADIMENSIONS[0]] ; EXTRADIMENSIONS[0] ; BODY[STATEMENTS[TYPE[PRIMITIVETYPECODE[int]] ; FRAGMENTS[NAME[IDENTIFIER[max]] ; EXTRADIMENSIONS[0] ; INITIALIZER[EXPRESSION[IDENTIFIER[jEdit]] ; NAME[IDENTIFIER[getIntegerProperty]] ; ARGUMENTS[ESCAPEDVALUE["recentFiles"], TOKEN[50]]]], EXPRESSION[LEFTOPERAND[EXPRESSION[IDENTIFIER[history]] ; NAME[IDENTIFIER[size]] ; ] ; OPERATOR[>] ; RIGHTOPERAND[IDENTIFIER[max]] ; ] ; BODY[EXPRESSION[EXPRESSION[IDENTIFIER[history]] ; NAME[IDENTIFIER[removeLast]] ; ]], EXPRESSION[EXPRESSION[IDENTIFIER[history]] ; NAME[IDENTIFIER[addFirst]] ; ARGUMENTS[IDENTIFIER[entry]]]]], MODIFIERS[KEYWORD[public], KEYWORD[static]] ; CONSTRUCTOR[false] ; RETURNTYPE2[NAME[IDENTIFIER[List]]] ; NAME[IDENTIFIER[getHistory]] ; EXTRADIMENSIONS[0] ; BODY[STATEMENTS[EXPRESSION[IDENTIFIER[history]]]], MODIFIERS[KEYWORD[private], KEYWORD[static]] ; TYPE[NAME[IDENTIFIER[LinkedList]]] ; FRAGMENTS[NAME[IDENTIFIER[history]] ; EXTRADIMENSIONS[0]], MODIFIERS[KEYWORD[private], KEYWORD[static]] ; TYPE[PRIMITIVETYPECODE[boolean]] ; FRAGMENTS[NAME[IDENTIFIER[pathsCaseInsensitive]] ; EXTRADIMENSIONS[0]], MODIFIERS[KEYWORD[private], KEYWORD[static]] ; TYPE[PRIMITIVETYPECODE[long]] ; FRAGMENTS[NAME[IDENTIFIER[recentModTime]] ; EXTRADIMENSIONS[0]], MODIFIERS[KEYWORD[static]] ; BODY[STATEMENTS[EXPRESSION[LEFTHANDSIDE[IDENTIFIER[pathsCaseInsensitive]] ; OPERATOR[=] ; RIGHTHANDSIDE[LEFTOPERAND[EXPRESSION[IDENTIFIER[OperatingSystem]] ; NAME[IDENTIFIER[isDOSDerived]] ; ] ; OPERATOR[||] ; RIGHTOPERAND[EXPRESSION[IDENTIFIER[OperatingSystem]] ; NAME[IDENTIFIER[isMacOS]] ; ] ; ]], EXPRESSION[LEFTHANDSIDE[IDENTIFIER[history]] ; OPERATOR[=] ; RIGHTHANDSIDE[TYPE[NAME[IDENTIFIER[LinkedList]]] ; ]]]]]]
****************************** SIMILARITY *****************************
0.83302034428795