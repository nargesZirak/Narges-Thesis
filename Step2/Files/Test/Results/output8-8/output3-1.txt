********************************  NODE 1  *******************************
static class RootsEntry extends VFS.DirectoryEntry {
  RootsEntry(  File file){
    this.path=this.deletePath=this.symlinkPath=file.getPath();
    if (isFloppy(file)) {
      type=VFS.DirectoryEntry.FILESYSTEM;
      name=path;
    }
 else     if (isDrive(file)) {
      type=VFS.DirectoryEntry.FILESYSTEM;
      if (getSystemDisplayName != null) {
        try {
          name=path + " " + (String)getSystemDisplayName.invoke(fsView,new Object[]{file});
        }
 catch (        Exception e) {
          name=path;
        }
      }
    }
 else     if (file.isDirectory()) {
      type=VFS.DirectoryEntry.FILESYSTEM;
      if (isFileSystemRoot != null) {
        try {
          if (Boolean.FALSE.equals(isFileSystemRoot.invoke(fsView,new Object[]{file}))) {
            type=VFS.DirectoryEntry.DIRECTORY;
          }
        }
 catch (        Exception e) {
        }
      }
      if (OperatingSystem.isMacOS())       name=MiscUtilities.getFileName(path);
 else       name=path;
    }
 else     type=VFS.DirectoryEntry.FILE;
  }
  public String getExtendedAttribute(  String name){
    if (name.equals(EA_TYPE))     return super.getExtendedAttribute(name);
 else {
      return null;
    }
  }
  private boolean isFloppy(  File file){
    if (isFloppyDrive != null) {
      try {
        return Boolean.TRUE.equals(isFloppyDrive.invoke(fsView,new Object[]{file}));
      }
 catch (      Exception e) {
        Log.log(Log.ERROR,this,e);
        return false;
      }
    }
 else     return path.startsWith("A:") || path.startsWith("B:");
  }
  private boolean isDrive(  File file){
    if (isDrive != null) {
      try {
        return Boolean.TRUE.equals(isDrive.invoke(fsView,new Object[]{file}));
      }
 catch (      Exception e) {
        return false;
      }
    }
 else     return true;
  }
}
********************************  NODE 2  *******************************
static class RootsEntry extends VFS.DirectoryEntry {
  RootsEntry(  File file){
    this.path=this.deletePath=this.symlinkPath=file.getPath();
    if (isFloppy(file)) {
      type=VFS.DirectoryEntry.FILESYSTEM;
      name=path;
    }
 else     if (isDrive(file)) {
      type=VFS.DirectoryEntry.FILESYSTEM;
      if (getSystemDisplayName != null) {
        try {
          name=path + " " + (String)getSystemDisplayName.invoke(fsView,new Object[]{file});
        }
 catch (        Exception e) {
          name=path;
        }
      }
    }
 else     if (file.isDirectory()) {
      type=VFS.DirectoryEntry.FILESYSTEM;
      if (isFileSystemRoot != null) {
        try {
          if (Boolean.FALSE.equals(isFileSystemRoot.invoke(fsView,new Object[]{file}))) {
            type=VFS.DirectoryEntry.DIRECTORY;
          }
        }
 catch (        Exception e) {
        }
      }
      if (OperatingSystem.isMacOS())       name=MiscUtilities.getFileName(path);
 else       name=path;
    }
 else     type=VFS.DirectoryEntry.FILE;
  }
  public String getExtendedAttribute(  String name){
    if (name.equals(EA_TYPE))     return super.getExtendedAttribute(name);
 else {
      return null;
    }
  }
  private boolean isFloppy(  File file){
    if (isFloppyDrive != null) {
      try {
        return Boolean.TRUE.equals(isFloppyDrive.invoke(fsView,new Object[]{file}));
      }
 catch (      Exception e) {
        return false;
      }
    }
 else     return path.startsWith("A:") || path.startsWith("B:");
  }
  private boolean isDrive(  File file){
    if (isDrive != null) {
      try {
        return Boolean.TRUE.equals(isDrive.invoke(fsView,new Object[]{file}));
      }
 catch (      Exception e) {
        Log.log(Log.ERROR,this,e);
        return false;
      }
    }
 else     return true;
  }
}
*****************************  ANTIUNIFIER  ****************************
TYPES[MODIFIERS[KEYWORD[static]] ; INTERFACE[false] ; NAME[IDENTIFIER[RootsEntry]] ; SUPERCLASSTYPE[NAME[QUALIFIER[IDENTIFIER[VFS]] ; NAME[IDENTIFIER[DirectoryEntry]]]] ; BODYDECLARATIONS[MODIFIERS[KEYWORD[private]] ; CONSTRUCTOR[false] ; RETURNTYPE2[PRIMITIVETYPECODE[boolean]] ; NAME[IDENTIFIER[isFloppy-or-isDrive]] ; PARAMETERS[TYPE[NAME[IDENTIFIER[File]]] ; VARARGS[false] ; NAME[IDENTIFIER[file]] ; EXTRADIMENSIONS[0]] ; EXTRADIMENSIONS[0] ; BODY[STATEMENTS[EXPRESSION[LEFTOPERAND[IDENTIFIER[isFloppyDrive-or-isDrive]] ; OPERATOR[!=] ; ] ; THENSTATEMENT[STATEMENTS[BODY[STATEMENTS[EXPRESSION[EXPRESSION[QUALIFIER[IDENTIFIER[Boolean]] ; NAME[IDENTIFIER[TRUE]]] ; NAME[IDENTIFIER[equals]] ; ARGUMENTS[EXPRESSION[IDENTIFIER[isFloppyDrive-or-isDrive]] ; NAME[IDENTIFIER[invoke]] ; ARGUMENTS[IDENTIFIER[fsView], TYPE[COMPONENTTYPE[NAME[IDENTIFIER[Object]]]] ; INITIALIZER[EXPRESSIONS[IDENTIFIER[file]]]]]]]] ; CATCHCLAUSES[EXCEPTION[TYPE[NAME[IDENTIFIER[Exception]]] ; VARARGS[false] ; NAME[IDENTIFIER[e]] ; EXTRADIMENSIONS[0]] ; BODY[STATEMENTS[EXPRESSION[EXPRESSION[IDENTIFIER[Log]] ; NAME[IDENTIFIER[log]] ; ARGUMENTS[IDENTIFIER[e], QUALIFIER[IDENTIFIER[Log]] ; NAME[IDENTIFIER[ERROR]], ]], EXPRESSION[BOOLEANVALUE[false]]]]]]] ; ELSESTATEMENT[EXPRESSION[LEFTOPERAND-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[path-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[startsWith-or-nil]] ; ARGUMENTS-OR-NIL[ESCAPEDVALUE-OR-NIL["A:"-or-nil]]] ; OPERATOR-OR-NIL[||-or-nil] ; RIGHTOPERAND-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[path-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[startsWith-or-nil]] ; ARGUMENTS-OR-NIL[ESCAPEDVALUE-OR-NIL["B:"-or-nil]]] ; BOOLEANVALUE-OR-NIL[true-or-nil]]]]], MODIFIERS[KEYWORD[private]] ; CONSTRUCTOR[false] ; RETURNTYPE2[PRIMITIVETYPECODE[boolean]] ; NAME[IDENTIFIER[isDrive-or-isFloppy]] ; PARAMETERS[TYPE[NAME[IDENTIFIER[File]]] ; VARARGS[false] ; NAME[IDENTIFIER[file]] ; EXTRADIMENSIONS[0]] ; EXTRADIMENSIONS[0] ; BODY[STATEMENTS[EXPRESSION[LEFTOPERAND[IDENTIFIER[isDrive-or-isFloppyDrive]] ; OPERATOR[!=] ; ] ; THENSTATEMENT[STATEMENTS[BODY[STATEMENTS[EXPRESSION[EXPRESSION[QUALIFIER[IDENTIFIER[Boolean]] ; NAME[IDENTIFIER[TRUE]]] ; NAME[IDENTIFIER[equals]] ; ARGUMENTS[EXPRESSION[IDENTIFIER[isDrive-or-isFloppyDrive]] ; NAME[IDENTIFIER[invoke]] ; ARGUMENTS[IDENTIFIER[fsView], TYPE[COMPONENTTYPE[NAME[IDENTIFIER[Object]]]] ; INITIALIZER[EXPRESSIONS[IDENTIFIER[file]]]]]]]] ; CATCHCLAUSES[EXCEPTION[TYPE[NAME[IDENTIFIER[Exception]]] ; VARARGS[false] ; NAME[IDENTIFIER[e]] ; EXTRADIMENSIONS[0]] ; BODY[STATEMENTS[EXPRESSION[BOOLEANVALUE[false]]]]]]] ; ELSESTATEMENT[EXPRESSION[BOOLEANVALUE-OR-NIL[true-or-nil] ; LEFTOPERAND-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[path-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[startsWith-or-nil]] ; ARGUMENTS-OR-NIL[ESCAPEDVALUE-OR-NIL["A:"-or-nil]]] ; OPERATOR-OR-NIL[||-or-nil] ; RIGHTOPERAND-OR-NIL[EXPRESSION-OR-NIL[IDENTIFIER-OR-NIL[path-or-nil]] ; NAME-OR-NIL[IDENTIFIER-OR-NIL[startsWith-or-nil]] ; ARGUMENTS-OR-NIL[ESCAPEDVALUE-OR-NIL["B:"-or-nil]]] ; ]]]], MODIFIERS[KEYWORD[public]] ; CONSTRUCTOR[false] ; RETURNTYPE2[NAME[IDENTIFIER[String]]] ; NAME[IDENTIFIER[getExtendedAttribute]] ; PARAMETERS[TYPE[NAME[IDENTIFIER[String]]] ; VARARGS[false] ; NAME[IDENTIFIER[name]] ; EXTRADIMENSIONS[0]] ; EXTRADIMENSIONS[0] ; BODY[STATEMENTS[EXPRESSION[EXPRESSION[IDENTIFIER[name]] ; NAME[IDENTIFIER[equals]] ; ARGUMENTS[IDENTIFIER[EA_TYPE]]] ; THENSTATEMENT[EXPRESSION[NAME[IDENTIFIER[getExtendedAttribute]] ; ARGUMENTS[IDENTIFIER[name]]]] ; ]], CONSTRUCTOR[true] ; NAME[IDENTIFIER[RootsEntry]] ; PARAMETERS[TYPE[NAME[IDENTIFIER[File]]] ; VARARGS[false] ; NAME[IDENTIFIER[file]] ; EXTRADIMENSIONS[0]] ; EXTRADIMENSIONS[0] ; BODY[STATEMENTS[EXPRESSION[NAME[IDENTIFIER[isFloppy]] ; ARGUMENTS[IDENTIFIER[file]]] ; THENSTATEMENT[STATEMENTS[EXPRESSION[LEFTHANDSIDE[IDENTIFIER[type]] ; OPERATOR[=] ; RIGHTHANDSIDE[QUALIFIER[QUALIFIER[IDENTIFIER[VFS]] ; NAME[IDENTIFIER[DirectoryEntry]]] ; NAME[IDENTIFIER[FILESYSTEM]]]], EXPRESSION[LEFTHANDSIDE[IDENTIFIER[name]] ; OPERATOR[=] ; RIGHTHANDSIDE[IDENTIFIER[path]]]]] ; ELSESTATEMENT[EXPRESSION[NAME[IDENTIFIER[isDrive]] ; ARGUMENTS[IDENTIFIER[file]]] ; THENSTATEMENT[STATEMENTS[EXPRESSION[LEFTOPERAND[IDENTIFIER[getSystemDisplayName]] ; OPERATOR[!=] ; ] ; THENSTATEMENT[STATEMENTS[BODY[STATEMENTS[EXPRESSION[LEFTHANDSIDE[IDENTIFIER[name]] ; OPERATOR[=] ; RIGHTHANDSIDE[LEFTOPERAND[IDENTIFIER[path]] ; OPERATOR[+] ; RIGHTOPERAND[ESCAPEDVALUE[" "]] ; EXTENDEDOPERANDS[TYPE[NAME[IDENTIFIER[String]]] ; EXPRESSION[EXPRESSION[IDENTIFIER[getSystemDisplayName]] ; NAME[IDENTIFIER[invoke]] ; ARGUMENTS[IDENTIFIER[fsView], TYPE[COMPONENTTYPE[NAME[IDENTIFIER[Object]]]] ; INITIALIZER[EXPRESSIONS[IDENTIFIER[file]]]]]]]]]] ; CATCHCLAUSES[EXCEPTION[TYPE[NAME[IDENTIFIER[Exception]]] ; VARARGS[false] ; NAME[IDENTIFIER[e]] ; EXTRADIMENSIONS[0]] ; BODY[STATEMENTS[EXPRESSION[LEFTHANDSIDE[IDENTIFIER[name]] ; OPERATOR[=] ; RIGHTHANDSIDE[IDENTIFIER[path]]]]]]]], EXPRESSION[LEFTHANDSIDE[IDENTIFIER[type]] ; OPERATOR[=] ; RIGHTHANDSIDE[QUALIFIER[QUALIFIER[IDENTIFIER[VFS]] ; NAME[IDENTIFIER[DirectoryEntry]]] ; NAME[IDENTIFIER[FILESYSTEM]]]]]] ; ELSESTATEMENT[EXPRESSION[EXPRESSION[IDENTIFIER[file]] ; NAME[IDENTIFIER[isDirectory]] ; ] ; THENSTATEMENT[STATEMENTS[EXPRESSION[LEFTOPERAND[IDENTIFIER[isFileSystemRoot]] ; OPERATOR[!=] ; ] ; THENSTATEMENT[STATEMENTS[BODY[STATEMENTS[EXPRESSION[EXPRESSION[QUALIFIER[IDENTIFIER[Boolean]] ; NAME[IDENTIFIER[FALSE]]] ; NAME[IDENTIFIER[equals]] ; ARGUMENTS[EXPRESSION[IDENTIFIER[isFileSystemRoot]] ; NAME[IDENTIFIER[invoke]] ; ARGUMENTS[IDENTIFIER[fsView], TYPE[COMPONENTTYPE[NAME[IDENTIFIER[Object]]]] ; INITIALIZER[EXPRESSIONS[IDENTIFIER[file]]]]]] ; THENSTATEMENT[STATEMENTS[EXPRESSION[LEFTHANDSIDE[IDENTIFIER[type]] ; OPERATOR[=] ; RIGHTHANDSIDE[QUALIFIER[QUALIFIER[IDENTIFIER[VFS]] ; NAME[IDENTIFIER[DirectoryEntry]]] ; NAME[IDENTIFIER[DIRECTORY]]]]]]]] ; CATCHCLAUSES[EXCEPTION[TYPE[NAME[IDENTIFIER[Exception]]] ; VARARGS[false] ; NAME[IDENTIFIER[e]] ; EXTRADIMENSIONS[0]] ; ]]], EXPRESSION[EXPRESSION[IDENTIFIER[OperatingSystem]] ; NAME[IDENTIFIER[isMacOS]] ; ] ; THENSTATEMENT[EXPRESSION[LEFTHANDSIDE[IDENTIFIER[name]] ; OPERATOR[=] ; RIGHTHANDSIDE[EXPRESSION[IDENTIFIER[MiscUtilities]] ; NAME[IDENTIFIER[getFileName]] ; ARGUMENTS[IDENTIFIER[path]]]]] ; ELSESTATEMENT[EXPRESSION[LEFTHANDSIDE[IDENTIFIER[name]] ; OPERATOR[=] ; RIGHTHANDSIDE[IDENTIFIER[path]]]], EXPRESSION[LEFTHANDSIDE[IDENTIFIER[type]] ; OPERATOR[=] ; RIGHTHANDSIDE[QUALIFIER[QUALIFIER[IDENTIFIER[VFS]] ; NAME[IDENTIFIER[DirectoryEntry]]] ; NAME[IDENTIFIER[FILESYSTEM]]]]]] ; ELSESTATEMENT[EXPRESSION[LEFTHANDSIDE[IDENTIFIER[type]] ; OPERATOR[=] ; RIGHTHANDSIDE[QUALIFIER[QUALIFIER[IDENTIFIER[VFS]] ; NAME[IDENTIFIER[DirectoryEntry]]] ; NAME[IDENTIFIER[FILE]]]]]]], EXPRESSION[LEFTHANDSIDE[NAME[IDENTIFIER[path]]] ; OPERATOR[=] ; RIGHTHANDSIDE[LEFTHANDSIDE[NAME[IDENTIFIER[deletePath]]] ; OPERATOR[=] ; RIGHTHANDSIDE[LEFTHANDSIDE[NAME[IDENTIFIER[symlinkPath]]] ; OPERATOR[=] ; RIGHTHANDSIDE[EXPRESSION[IDENTIFIER[file]] ; NAME[IDENTIFIER[getPath]] ; ]]]]]]]]
****************************** SIMILARITY *****************************
0.9077625570776255