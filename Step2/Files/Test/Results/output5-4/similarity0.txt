
============================================================================
ID: public void doctypeDecl(String name,String publicId,String systemId) throws Exception {
  if ("ACTIONS".equals(name))   return;
  Log.log(Log.ERROR,this,path + ": DOCTYPE must be ACTIONS");
}

catch (IOException io) {
  Log.log(Log.ERROR,this,io);
  return null;
}

MATCHES: 0.26176928731914784
============================================================================
ID: public void doctypeDecl(String name,String publicId,String systemId) throws Exception {
  if ("ACTIONS".equals(name))   return;
  Log.log(Log.ERROR,this,path + ": DOCTYPE must be ACTIONS");
}

catch (IOException io) {
  Log.log(Log.ERROR,this,io);
  return null;
}

MATCHES: 0.2571143555695118
============================================================================
ID: public void doctypeDecl(String name,String publicId,String systemId) throws Exception {
  if ("ACTIONS".equals(name))   return;
  Log.log(Log.ERROR,this,path + ": DOCTYPE must be ACTIONS");
}

public static void dump(){
  Log.log(Log.DEBUG,JARClassLoader.class,"Total instances created: " + INDEX);
synchronized (classHash) {
    Iterator entries=classHash.entrySet().iterator();
    while (entries.hasNext()) {
      Map.Entry entry=(Map.Entry)entries.next();
      if (entry.getValue() != NO_CLASS) {
      }
    }
  }
}

MATCHES: 0.25049077865320307
============================================================================
ID: public void doctypeDecl(String name,String publicId,String systemId) throws Exception {
  if ("ACTIONS".equals(name))   return;
  Log.log(Log.ERROR,this,path + ": DOCTYPE must be ACTIONS");
}

public static void dump(){
  Log.log(Log.DEBUG,JARClassLoader.class,"Live instances: " + live);
synchronized (classHash) {
    Iterator entries=classHash.entrySet().iterator();
    while (entries.hasNext()) {
      Map.Entry entry=(Map.Entry)entries.next();
      if (entry.getValue() != NO_CLASS) {
      }
    }
  }
}

MATCHES: 0.25049077865320307
============================================================================
ID: public void doctypeDecl(String name,String publicId,String systemId) throws Exception {
  if ("ACTIONS".equals(name))   return;
  Log.log(Log.ERROR,this,path + ": DOCTYPE must be ACTIONS");
}

if (entry.getValue() != NO_CLASS) {
  Log.log(Log.DEBUG,JARClassLoader.class,entry.getKey() + " ==> " + entry.getValue());
}

MATCHES: 0.24690116898699657
============================================================================
ID: public void doctypeDecl(String name,String publicId,String systemId) throws Exception {
  if ("ACTIONS".equals(name))   return;
  Log.log(Log.ERROR,this,path + ": DOCTYPE must be ACTIONS");
}

catch (IOException io) {
  Log.log(Log.ERROR,this,io);
  return null;
}

MATCHES: 0.2406867004113263
============================================================================
ID: public void doctypeDecl(String name,String publicId,String systemId) throws Exception {
  if ("ACTIONS".equals(name))   return;
  Log.log(Log.ERROR,this,path + ": DOCTYPE must be ACTIONS");
}

if (success == -1) {
  Log.log(Log.ERROR,this,"Failed to load class " + clazz + " from "+ zipFile.getName());
  throw new ClassNotFoundException(clazz);
}

MATCHES: 0.2339527421273112
============================================================================
ID: public void doctypeDecl(String name,String publicId,String systemId) throws Exception {
  if ("ACTIONS".equals(name))   return;
  Log.log(Log.ERROR,this,path + ": DOCTYPE must be ACTIONS");
}

catch (IOException io) {
  Log.log(Log.ERROR,this,io);
  throw new ClassNotFoundException(clazz);
}

MATCHES: 0.2337035084419507