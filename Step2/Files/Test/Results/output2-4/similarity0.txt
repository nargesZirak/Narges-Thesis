
============================================================================
ID: public void doctypeDecl(String name,String publicId,String systemId) throws Exception {
  if ("RECENT".equals(name))   return;
  Log.log(Log.ERROR,this,"recent.xml: DOCTYPE must be RECENT");
}

catch (IOException io) {
  Log.log(Log.ERROR,this,io);
  return null;
}

MATCHES: 0.17884965323986723
============================================================================
ID: public void doctypeDecl(String name,String publicId,String systemId) throws Exception {
  if ("RECENT".equals(name))   return;
  Log.log(Log.ERROR,this,"recent.xml: DOCTYPE must be RECENT");
}

catch (IOException io) {
  Log.log(Log.ERROR,this,io);
  return null;
}

MATCHES: 0.17625265390323122
============================================================================
ID: public void doctypeDecl(String name,String publicId,String systemId) throws Exception {
  if ("RECENT".equals(name))   return;
  Log.log(Log.ERROR,this,"recent.xml: DOCTYPE must be RECENT");
}

catch (IOException io) {
  Log.log(Log.ERROR,this,io);
  throw new ClassNotFoundException(clazz);
}

MATCHES: 0.17433983072798595
============================================================================
ID: public void doctypeDecl(String name,String publicId,String systemId) throws Exception {
  if ("RECENT".equals(name))   return;
  Log.log(Log.ERROR,this,"recent.xml: DOCTYPE must be RECENT");
}

if (success == -1) {
  Log.log(Log.ERROR,this,"Failed to load class " + clazz + " from "+ zipFile.getName());
  throw new ClassNotFoundException(clazz);
}

MATCHES: 0.17247875032927415
============================================================================
ID: public void doctypeDecl(String name,String publicId,String systemId) throws Exception {
  if ("RECENT".equals(name))   return;
  Log.log(Log.ERROR,this,"recent.xml: DOCTYPE must be RECENT");
}

catch (IOException io) {
  Log.log(Log.ERROR,this,io);
  return null;
}

MATCHES: 0.16561809140227707
============================================================================
ID: public void doctypeDecl(String name,String publicId,String systemId) throws Exception {
  if ("RECENT".equals(name))   return;
  Log.log(Log.ERROR,this,"recent.xml: DOCTYPE must be RECENT");
}

public static void dump(){
  Log.log(Log.DEBUG,JARClassLoader.class,"Total instances created: " + INDEX);
synchronized (classHash) {
    Iterator entries=classHash.entrySet().iterator();
    while (entries.hasNext()) {
      Map.Entry entry=(Map.Entry)entries.next();
      if (entry.getValue() != NO_CLASS) {
      }
    }
  }
}

MATCHES: 0.16510871349565276
============================================================================
ID: public void doctypeDecl(String name,String publicId,String systemId) throws Exception {
  if ("RECENT".equals(name))   return;
  Log.log(Log.ERROR,this,"recent.xml: DOCTYPE must be RECENT");
}

public static void dump(){
  Log.log(Log.DEBUG,JARClassLoader.class,"Live instances: " + live);
synchronized (classHash) {
    Iterator entries=classHash.entrySet().iterator();
    while (entries.hasNext()) {
      Map.Entry entry=(Map.Entry)entries.next();
      if (entry.getValue() != NO_CLASS) {
      }
    }
  }
}

MATCHES: 0.16510871349565276
============================================================================
ID: public void doctypeDecl(String name,String publicId,String systemId) throws Exception {
  if ("RECENT".equals(name))   return;
  Log.log(Log.ERROR,this,"recent.xml: DOCTYPE must be RECENT");
}

if (entry.getValue() != NO_CLASS) {
  Log.log(Log.DEBUG,JARClassLoader.class,entry.getKey() + " ==> " + entry.getValue());
}

MATCHES: 0.15875471577693753