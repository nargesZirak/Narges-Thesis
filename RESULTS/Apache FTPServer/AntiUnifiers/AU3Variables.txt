Theta1 = {V1 -> public, V2 -> execute, V3 -> formalParameter, V4 -> formalParameter(modifiers(modifier(final)), V5 -> formalParameter, V6 -> formalParameter, V7 -> formalParameter, V8 -> formalParameter, V9 -> NIL, V10 -> formalParameter, V11 -> formalParameter(modifiers(modifier(final)), V12 -> simpleName, V13 -> IOException, V14 -> FtpException, V15 -> simpleName, V16 -> tryStatement, V17 -> block, V18 -> ifStatement(prefixExpression (operator(!),methodInvocation(simpleName(toFile),simpleName(isWritable))),block(statements(methodInvocation(simpleName(session),simpleName(write),arguments(methodInvocation(simpleName(LocalizedFtpReply),simpleName(translate),arguments(simpleName(session),simpleName(request),simpleName(context),qualifiedName(simpleName(FtpReply),simpleName(REPLY_553_REQUESTED_ACTION_NOT_TAKEN_FILE_NAME_NOT_ALLOWED)),stringLiteral("RNTO.permission"),nullLiteral())))),returnStatement()))), V19 -> NIL, V20 -> NIL, V21 -> NIL, V22 -> NIL, V23 -> NIL, V24 -> NIL, V25 -> NIL, V26 -> NIL, V27 -> NIL, V28 -> NIL, V29 -> NIL, V30 -> NIL, V31 -> NIL, V32 -> NIL, V33 -> ifStatement, V34 -> infixExpression, V35 -> NIL, V36 -> NIL, V37 -> NIL, V38 -> NIL, V39 -> block, V40 -> NIL, V41 -> NIL, V42 -> NIL, V43 -> NIL, V44 -> NIL, V45 -> NIL, V46 -> NIL, V47 -> NIL, V48 -> NIL, V49 -> NIL, V50 -> primitiveType(void)}

Theta2 = {V1 -> public, V2 -> execute, V3 -> formalParameter, V4 -> formalParameter(modifiers(modifier(final)), V5 -> formalParameter, V6 -> formalParameter, V7 -> formalParameter, V8 -> formalParameter, V9 -> NIL, V10 -> formalParameter, V11 -> formalParameter(modifiers(modifier(final)), V12 -> simpleName, V13 -> IOException, V14 -> FtpException, V15 -> simpleName, V16 -> tryStatement, V17 -> block, V18 -> NIL, V19 -> NIL, V20 -> NIL, V21 -> NIL, V22 -> NIL, V23 -> NIL, V24 -> NIL, V25 -> NIL, V26 -> NIL, V27 -> NIL, V28 -> NIL, V29 -> NIL, V30 -> NIL, V31 -> NIL, V32 -> NIL, V33 -> ifStatement, V34 -> infixExpression, V35 -> NIL, V36 -> NIL, V37 -> NIL, V38 -> NIL, V39 -> block, V40 -> NIL, V41 -> NIL, V42 -> variableDeclarationStatement(simpleType(String),fragments(variableDeclarationFragment(simpleName(fileName),methodInvocation(simpleName(request),simpleName(getArgument))))), V43 -> ifStatement(infixExpression(infixExpression(simpleName(fileName),operator(==),nullLiteral()),operator(||),infixExpression(methodInvocation(simpleName(fileName),simpleName(indexOf),arguments(qualifiedName(simpleName(File),simpleName(pathSeparatorChar)))),operator(>),prefixExpression (operator(-),numberLiteral(1)))),block(statements(methodInvocation(simpleName(session),simpleName(write),arguments(methodInvocation(simpleName(LocalizedFtpReply),simpleName(translate),arguments(simpleName(session),simpleName(request),simpleName(context),qualifiedName(simpleName(FtpReply),simpleName(REPLY_501_SYNTAX_ERROR_IN_PARAMETERS_OR_ARGUMENTS)),stringLiteral("MKD"),nullLiteral())))),returnStatement()))), V44 -> tryStatement(block(statements(assignment(simpleName(file),operator(=),methodInvocation(methodInvocation(simpleName(session),simpleName(getFileSystemView)),simpleName(getFile),arguments(simpleName(fileName)))))),catchClauses(catchClause(singleVariableDeclaration(simpleType(Exception),simpleName(ex)),block(statements(methodInvocation(simpleName(LOG),simpleName(debug),arguments(stringLiteral("Exception getting file object"),simpleName(ex)))))))), V45 -> ifStatement(infixExpression(simpleName(file),operator(==),nullLiteral()),block(statements(methodInvocation(simpleName(session),simpleName(write),arguments(methodInvocation(simpleName(LocalizedFtpReply),simpleName(translate),arguments(simpleName(session),simpleName(request),simpleName(context),qualifiedName(simpleName(FtpReply),simpleName(REPLY_550_REQUESTED_ACTION_NOT_TAKEN)),stringLiteral("MKD.invalid"),simpleName(fileName))))),returnStatement()))), V46 -> ifStatement(prefixExpression (operator(!),methodInvocation(simpleName(file),simpleName(isWritable))),block(statements(methodInvocation(simpleName(session),simpleName(write),arguments(methodInvocation(simpleName(LocalizedFtpReply),simpleName(translate),arguments(simpleName(session),simpleName(request),simpleName(context),qualifiedName(simpleName(FtpReply),simpleName(REPLY_550_REQUESTED_ACTION_NOT_TAKEN)),stringLiteral("MKD.permission"),simpleName(fileName))))),returnStatement()))), V47 -> ifStatement(methodInvocation(simpleName(file),simpleName(doesExist)),block(statements(methodInvocation(simpleName(session),simpleName(write),arguments(methodInvocation(simpleName(LocalizedFtpReply),simpleName(translate),arguments(simpleName(session),simpleName(request),simpleName(context),qualifiedName(simpleName(FtpReply),simpleName(REPLY_550_REQUESTED_ACTION_NOT_TAKEN)),stringLiteral("MKD.exists"),simpleName(fileName))))),returnStatement()))), V48 -> NIL, V49 -> NIL, V50 -> primitiveType(void)}

Theta3 = {V1 -> public, V2 -> execute, V3 -> formalParameter, V4 -> formalParameter(modifiers(modifier(final)), V5 -> formalParameter, V6 -> formalParameter, V7 -> formalParameter, V8 -> formalParameter, V9 -> NIL, V10 -> formalParameter, V11 -> formalParameter(modifiers(modifier(final)), V12 -> simpleName, V13 -> IOException, V14 -> FtpException, V15 -> simpleName, V16 -> tryStatement, V17 -> block, V18 -> NIL, V19 -> NIL, V20 -> NIL, V21 -> NIL, V22 -> NIL, V23 -> NIL, V24 -> NIL, V25 -> NIL, V26 -> NIL, V27 -> NIL, V28 -> NIL, V29 -> NIL, V30 -> NIL, V31 -> NIL, V32 -> NIL, V33 -> ifStatement, V34 -> infixExpression, V35 -> NIL, V36 -> NIL, V37 -> NIL, V38 -> NIL, V39 -> block, V40 -> NIL, V41 -> NIL, V42 -> variableDeclarationStatement(simpleType(String),fragments(variableDeclarationFragment(simpleName(fileName),methodInvocation(simpleName(request),simpleName(getArgument))))), V43 -> ifStatement(infixExpression(simpleName(fileName),operator(==),nullLiteral()),block(statements(methodInvocation(simpleName(session),simpleName(write),arguments(methodInvocation(simpleName(LocalizedFtpReply),simpleName(translate),arguments(simpleName(session),simpleName(request),simpleName(context),qualifiedName(simpleName(FtpReply),simpleName(REPLY_501_SYNTAX_ERROR_IN_PARAMETERS_OR_ARGUMENTS)),stringLiteral("DELE"),nullLiteral())))),returnStatement()))), V44 -> tryStatement(block(statements(assignment(simpleName(file),operator(=),methodInvocation(methodInvocation(simpleName(session),simpleName(getFileSystemView)),simpleName(getFile),arguments(simpleName(fileName)))))),catchClauses(catchClause(singleVariableDeclaration(simpleType(Exception),simpleName(ex)),block(statements(methodInvocation(simpleName(LOG),simpleName(debug),arguments(infixExpression(stringLiteral("Could not get file "),operator(+),simpleName(fileName)),simpleName(ex)))))))), V45 -> ifStatement(infixExpression(simpleName(file),operator(==),nullLiteral()),block(statements(methodInvocation(simpleName(session),simpleName(write),arguments(methodInvocation(simpleName(LocalizedFtpReply),simpleName(translate),arguments(simpleName(session),simpleName(request),simpleName(context),qualifiedName(simpleName(FtpReply),simpleName(REPLY_550_REQUESTED_ACTION_NOT_TAKEN)),stringLiteral("DELE.invalid"),simpleName(fileName))))),returnStatement()))), V46 -> ifStatement(prefixExpression (operator(!),methodInvocation(simpleName(file),simpleName(isRemovable))),block(statements(methodInvocation(simpleName(session),simpleName(write),arguments(methodInvocation(simpleName(LocalizedFtpReply),simpleName(translate),arguments(simpleName(session),simpleName(request),simpleName(context),qualifiedName(simpleName(FtpReply),simpleName(REPLY_450_REQUESTED_FILE_ACTION_NOT_TAKEN)),stringLiteral("DELE.permission"),simpleName(fileName))))),returnStatement()))), V47 -> ifStatement(methodInvocation(simpleName(file),simpleName(isDirectory)),block(statements(methodInvocation(simpleName(session),simpleName(write),arguments(methodInvocation(simpleName(LocalizedFtpReply),simpleName(translate),arguments(simpleName(session),simpleName(request),simpleName(context),qualifiedName(simpleName(FtpReply),simpleName(REPLY_550_REQUESTED_ACTION_NOT_TAKEN)),stringLiteral("DELE.invalid"),simpleName(fileName))))),returnStatement()))), V48 -> NIL, V49 -> NIL, V50 -> primitiveType(void)}

Theta4 = {V1 -> public, V2 -> execute, V3 -> formalParameter, V4 -> formalParameter(modifiers(modifier(final)), V5 -> formalParameter, V6 -> formalParameter, V7 -> formalParameter, V8 -> formalParameter, V9 -> NIL, V10 -> formalParameter, V11 -> formalParameter(modifiers(modifier(final)), V12 -> simpleName, V13 -> IOException, V14 -> FtpException, V15 -> simpleName, V16 -> tryStatement, V17 -> block, V18 -> NIL, V19 -> NIL, V20 -> NIL, V21 -> NIL, V22 -> NIL, V23 -> NIL, V24 -> NIL, V25 -> NIL, V26 -> NIL, V27 -> NIL, V28 -> NIL, V29 -> NIL, V30 -> NIL, V31 -> NIL, V32 -> NIL, V33 -> ifStatement, V34 -> infixExpression, V35 -> NIL, V36 -> NIL, V37 -> NIL, V38 -> NIL, V39 -> block, V40 -> NIL, V41 -> NIL, V42 -> variableDeclarationStatement(simpleType(String),fragments(variableDeclarationFragment(simpleName(fileName),methodInvocation(simpleName(request),simpleName(getArgument))))), V43 -> ifStatement(infixExpression(simpleName(fileName),operator(==),nullLiteral()),block(statements(methodInvocation(simpleName(session),simpleName(write),arguments(methodInvocation(simpleName(LocalizedFtpReply),simpleName(translate),arguments(simpleName(session),simpleName(request),simpleName(context),qualifiedName(simpleName(FtpReply),simpleName(REPLY_501_SYNTAX_ERROR_IN_PARAMETERS_OR_ARGUMENTS)),stringLiteral("RMD"),nullLiteral())))),returnStatement()))), V44 -> tryStatement(block(statements(assignment(simpleName(file),operator(=),methodInvocation(methodInvocation(simpleName(session),simpleName(getFileSystemView)),simpleName(getFile),arguments(simpleName(fileName)))))),catchClauses(catchClause(singleVariableDeclaration(simpleType(Exception),simpleName(ex)),block(statements(methodInvocation(simpleName(LOG),simpleName(debug),arguments(stringLiteral("Exception getting file object"),simpleName(ex)))))))), V45 -> ifStatement(infixExpression(simpleName(file),operator(==),nullLiteral()),block(statements(methodInvocation(simpleName(session),simpleName(write),arguments(methodInvocation(simpleName(LocalizedFtpReply),simpleName(translate),arguments(simpleName(session),simpleName(request),simpleName(context),qualifiedName(simpleName(FtpReply),simpleName(REPLY_550_REQUESTED_ACTION_NOT_TAKEN)),stringLiteral("RMD.permission"),simpleName(fileName))))),returnStatement()))), V46 -> ifStatement(prefixExpression (operator(!),methodInvocation(simpleName(file),simpleName(isRemovable))),block(statements(methodInvocation(simpleName(session),simpleName(write),arguments(methodInvocation(simpleName(LocalizedFtpReply),simpleName(translate),arguments(simpleName(session),simpleName(request),simpleName(context),qualifiedName(simpleName(FtpReply),simpleName(REPLY_550_REQUESTED_ACTION_NOT_TAKEN)),stringLiteral("RMD.permission"),simpleName(fileName))))),returnStatement()))), V47 -> ifStatement(methodInvocation(simpleName(file),simpleName(equals),arguments(simpleName(cwd))),block(statements(methodInvocation(simpleName(session),simpleName(write),arguments(methodInvocation(simpleName(LocalizedFtpReply),simpleName(translate),arguments(simpleName(session),simpleName(request),simpleName(context),qualifiedName(simpleName(FtpReply),simpleName(REPLY_450_REQUESTED_FILE_ACTION_NOT_TAKEN)),stringLiteral("RMD.busy"),simpleName(fileName))))),returnStatement()))), V48 -> ifStatement(prefixExpression (operator(!),methodInvocation(simpleName(file),simpleName(isDirectory))),block(statements(methodInvocation(simpleName(session),simpleName(write),arguments(methodInvocation(simpleName(LocalizedFtpReply),simpleName(translate),arguments(simpleName(session),simpleName(request),simpleName(context),qualifiedName(simpleName(FtpReply),simpleName(REPLY_550_REQUESTED_ACTION_NOT_TAKEN)),stringLiteral("RMD.invalid"),simpleName(fileName))))),returnStatement()))), V49 -> variableDeclarationStatement(simpleType(FtpFile),fragments(variableDeclarationFragment(simpleName(cwd),methodInvocation(methodInvocation(simpleName(session),simpleName(getFileSystemView)),simpleName(getWorkingDirectory))))), V50 -> primitiveType(void)}

Theta5 = {V1 -> public, V2 -> execute, V3 -> formalParameter, V4 -> formalParameter(modifiers(modifier(final)), V5 -> formalParameter, V6 -> formalParameter, V7 -> formalParameter, V8 -> formalParameter, V9 -> NIL, V10 -> formalParameter, V11 -> formalParameter(modifiers(modifier(final)), V12 -> simpleName, V13 -> IOException, V14 -> IOException, V15 -> simpleName, V16 -> tryStatement, V17 -> block, V18 -> NIL, V19 -> NIL, V20 -> NIL, V21 -> NIL, V22 -> NIL, V23 -> NIL, V24 -> NIL, V25 -> NIL, V26 -> NIL, V27 -> NIL, V28 -> NIL, V29 -> NIL, V30 -> NIL, V31 -> NIL, V32 -> NIL, V33 -> ifStatement, V34 -> infixExpression, V35 -> NIL, V36 -> NIL, V37 -> synchronizedStatement, V38 -> NIL, V39 -> block, V40 -> NIL, V41 -> NIL, V42 -> NIL, V43 -> NIL, V44 -> NIL, V45 -> NIL, V46 -> methodInvocation(methodInvocation(simpleName(session),simpleName(close),arguments(booleanLiteral(false))),simpleName(awaitUninterruptibly),arguments(numberLiteral(10000))), V47 -> NIL, V48 -> NIL, V49 -> NIL, V50 -> primitiveType(void)}

Theta6 = {V1 -> public, V2 -> execute, V3 -> formalParameter, V4 -> formalParameter(modifiers(modifier(final)), V5 -> formalParameter, V6 -> formalParameter, V7 -> formalParameter, V8 -> formalParameter, V9 -> NIL, V10 -> formalParameter, V11 -> formalParameter(modifiers(modifier(final)), V12 -> simpleName, V13 -> IOException, V14 -> FtpException, V15 -> simpleName, V16 -> tryStatement, V17 -> block, V18 -> NIL, V19 -> variableDeclarationStatement(simpleType(String),fragments(variableDeclarationFragment(simpleName(userName),methodInvocation(simpleName(session),simpleName(getUserArgument))))), V20 -> variableDeclarationStatement(primitiveType(int),fragments(variableDeclarationFragment(simpleName(currLogin),methodInvocation(simpleName(stat),simpleName(getCurrentLoginNumber))))), V21 -> variableDeclarationStatement(primitiveType(int),fragments(variableDeclarationFragment(simpleName(maxLogin),methodInvocation(methodInvocation(simpleName(context),simpleName(getConnectionConfig)),simpleName(getMaxLogins))))), V22 -> ifStatement(infixExpression(infixExpression(simpleName(maxLogin),operator(!=),numberLiteral(0)),operator(&&),infixExpression(simpleName(currLogin),operator(>=),simpleName(maxLogin))),block(statements(methodInvocation(simpleName(session),simpleName(write),arguments(methodInvocation(simpleName(LocalizedFtpReply),simpleName(translate),arguments(simpleName(session),simpleName(request),simpleName(context),qualifiedName(simpleName(FtpReply),simpleName(REPLY_421_SERVICE_NOT_AVAILABLE_CLOSING_CONTROL_CONNECTION)),stringLiteral("PASS.login"),nullLiteral())))),returnStatement()))), V23 -> variableDeclarationStatement(simpleType(UserManager),fragments(variableDeclarationFragment(simpleName(userManager),methodInvocation(simpleName(context),simpleName(getUserManager))))), V24 -> variableDeclarationStatement(simpleType(User),fragments(variableDeclarationFragment(simpleName(authenticatedUser),nullLiteral()))), V25 -> tryStatement(block(statements(variableDeclarationStatement(simpleType(UserMetadata),fragments(variableDeclarationFragment(simpleName(userMetadata),classInstanceCreation(simpleType(UserMetadata))))),ifStatement(instanceofExpression(methodInvocation(simpleName(session),simpleName(getRemoteAddress)),simpleType(InetSocketAddress)),block(statements(methodInvocation(simpleName(userMetadata),simpleName(setInetAddress),arguments(methodInvocation(parenthesizedExpression(castExpression(simpleType(InetSocketAddress),methodInvocation(simpleName(session),simpleName(getRemoteAddress)))),simpleName(getAddress))))))),methodInvocation(simpleName(userMetadata),simpleName(setCertificateChain),arguments(methodInvocation(simpleName(session),simpleName(getClientCertificates)))),variableDeclarationStatement(simpleType(Authentication),fragments(variableDeclarationFragment(simpleName(auth)))),ifStatement(simpleName(anonymous),block(statements(assignment(simpleName(auth),operator(=),classInstanceCreation(simpleType(AnonymousAuthentication),arguments(simpleName(userMetadata)))))),block(statements(assignment(simpleName(auth),operator(=),classInstanceCreation(simpleType(UsernamePasswordAuthentication),arguments(simpleName(userName),simpleName(password),simpleName(userMetadata))))))),assignment(simpleName(authenticatedUser),operator(=),methodInvocation(simpleName(userManager),simpleName(authenticate),arguments(simpleName(auth)))))),catchClauses(catchClause(singleVariableDeclaration(simpleType(AuthenticationFailedException),simpleName(e)),block(statements(assignment(simpleName(authenticatedUser),operator(=),nullLiteral())))),catchClause(singleVariableDeclaration(simpleType(Exception),simpleName(e)),block(statements(assignment(simpleName(authenticatedUser),operator(=),nullLiteral())))))), V26 -> variableDeclarationStatement(simpleType(User),fragments(variableDeclarationFragment(simpleName(oldUser),methodInvocation(simpleName(session),simpleName(getUser))))), V27 -> variableDeclarationStatement(simpleType(String),fragments(variableDeclarationFragment(simpleName(oldUserArgument),methodInvocation(simpleName(session),simpleName(getUserArgument))))), V28 -> variableDeclarationStatement(primitiveType(int),fragments(variableDeclarationFragment(simpleName(oldMaxIdleTime),methodInvocation(simpleName(session),simpleName(getMaxIdleTime))))), V29 -> ifStatement(infixExpression(simpleName(authenticatedUser),operator(!=),nullLiteral()),block(statements(methodInvocation(simpleName(session),simpleName(setUser),arguments(simpleName(authenticatedUser))),methodInvocation(simpleName(session),simpleName(setUserArgument),arguments(nullLiteral())),methodInvocation(simpleName(session),simpleName(setMaxIdleTime),arguments(methodInvocation(simpleName(authenticatedUser),simpleName(getMaxIdleTime)))),assignment(simpleName(success),operator(=),booleanLiteral(true)))),block(statements(methodInvocation(simpleName(session),simpleName(setUser),arguments(nullLiteral()))))), V30 -> variableDeclarationStatement(simpleType(FileSystemFactory),fragments(variableDeclarationFragment(simpleName(fmanager),methodInvocation(simpleName(context),simpleName(getFileSystemManager))))), V31 -> variableDeclarationStatement(simpleType(FileSystemView),fragments(variableDeclarationFragment(simpleName(fsview),methodInvocation(simpleName(fmanager),simpleName(createFileSystemView),arguments(simpleName(authenticatedUser)))))), V32 -> NIL, V33 -> ifStatement, V34 -> infixExpression, V35 -> NIL, V36 -> NIL, V37 -> NIL, V38 -> NIL, V39 -> block, V40 -> NIL, V41 -> NIL, V42 -> NIL, V43 -> NIL, V44 -> NIL, V45 -> NIL, V46 -> methodInvocation(methodInvocation(simpleName(session),simpleName(close),arguments(booleanLiteral(false))),simpleName(awaitUninterruptibly),arguments(numberLiteral(10000))), V47 -> NIL, V48 -> NIL, V49 -> variableDeclarationStatement(simpleType(ServerFtpStatistics),fragments(variableDeclarationFragment(simpleName(stat),castExpression(simpleType(ServerFtpStatistics),methodInvocation(simpleName(context),simpleName(getFtpStatistics)))))), V50 -> primitiveType(void)}

Theta7 = {V1 -> public, V2 -> execute, V3 -> formalParameter, V4 -> formalParameter(modifiers(modifier(final)), V5 -> formalParameter, V6 -> formalParameter, V7 -> formalParameter, V8 -> formalParameter, V9 -> NIL, V10 -> formalParameter, V11 -> formalParameter(modifiers(modifier(final)), V12 -> simpleName, V13 -> IOException, V14 -> FtpException, V15 -> simpleName, V16 -> tryStatement, V17 -> block, V18 -> NIL, V19 -> variableDeclarationStatement(simpleType(String),fragments(variableDeclarationFragment(simpleName(userName),methodInvocation(simpleName(session),simpleName(getUserArgument))))), V20 -> variableDeclarationStatement(primitiveType(int),fragments(variableDeclarationFragment(simpleName(currLogin),methodInvocation(simpleName(stat),simpleName(getCurrentLoginNumber))))), V21 -> variableDeclarationStatement(primitiveType(int),fragments(variableDeclarationFragment(simpleName(maxLogin),methodInvocation(methodInvocation(simpleName(context),simpleName(getConnectionConfig)),simpleName(getMaxLogins))))), V22 -> ifStatement(infixExpression(infixExpression(simpleName(maxLogin),operator(!=),numberLiteral(0)),operator(&&),infixExpression(simpleName(currLogin),operator(>=),simpleName(maxLogin))),block(statements(methodInvocation(simpleName(session),simpleName(write),arguments(methodInvocation(simpleName(LocalizedFtpReply),simpleName(translate),arguments(simpleName(session),simpleName(request),simpleName(context),qualifiedName(simpleName(FtpReply),simpleName(REPLY_421_SERVICE_NOT_AVAILABLE_CLOSING_CONTROL_CONNECTION)),stringLiteral("PASS.login"),nullLiteral())))),returnStatement()))), V23 -> variableDeclarationStatement(simpleType(UserManager),fragments(variableDeclarationFragment(simpleName(userManager),methodInvocation(simpleName(context),simpleName(getUserManager))))), V24 -> variableDeclarationStatement(simpleType(User),fragments(variableDeclarationFragment(simpleName(authenticatedUser),nullLiteral()))), V25 -> tryStatement(block(statements(variableDeclarationStatement(simpleType(UserMetadata),fragments(variableDeclarationFragment(simpleName(userMetadata),classInstanceCreation(simpleType(UserMetadata))))),ifStatement(instanceofExpression(methodInvocation(simpleName(session),simpleName(getRemoteAddress)),simpleType(InetSocketAddress)),block(statements(methodInvocation(simpleName(userMetadata),simpleName(setInetAddress),arguments(methodInvocation(parenthesizedExpression(castExpression(simpleType(InetSocketAddress),methodInvocation(simpleName(session),simpleName(getRemoteAddress)))),simpleName(getAddress))))))),methodInvocation(simpleName(userMetadata),simpleName(setCertificateChain),arguments(methodInvocation(simpleName(session),simpleName(getClientCertificates)))),variableDeclarationStatement(simpleType(Authentication),fragments(variableDeclarationFragment(simpleName(auth)))),ifStatement(simpleName(anonymous),block(statements(assignment(simpleName(auth),operator(=),classInstanceCreation(simpleType(AnonymousAuthentication),arguments(simpleName(userMetadata)))))),block(statements(assignment(simpleName(auth),operator(=),classInstanceCreation(simpleType(UsernamePasswordAuthentication),arguments(simpleName(userName),simpleName(password),simpleName(userMetadata))))))),assignment(simpleName(authenticatedUser),operator(=),methodInvocation(simpleName(userManager),simpleName(authenticate),arguments(simpleName(auth)))))),catchClauses(catchClause(singleVariableDeclaration(simpleType(AuthenticationFailedException),simpleName(e)),block(statements(assignment(simpleName(authenticatedUser),operator(=),nullLiteral())))),catchClause(singleVariableDeclaration(simpleType(Exception),simpleName(e)),block(statements(assignment(simpleName(authenticatedUser),operator(=),nullLiteral())))))), V26 -> variableDeclarationStatement(simpleType(User),fragments(variableDeclarationFragment(simpleName(oldUser),methodInvocation(simpleName(session),simpleName(getUser))))), V27 -> variableDeclarationStatement(simpleType(String),fragments(variableDeclarationFragment(simpleName(oldUserArgument),methodInvocation(simpleName(session),simpleName(getUserArgument))))), V28 -> variableDeclarationStatement(primitiveType(int),fragments(variableDeclarationFragment(simpleName(oldMaxIdleTime),methodInvocation(simpleName(session),simpleName(getMaxIdleTime))))), V29 -> ifStatement(infixExpression(simpleName(authenticatedUser),operator(!=),nullLiteral()),block(statements(methodInvocation(simpleName(session),simpleName(setUser),arguments(simpleName(authenticatedUser))),methodInvocation(simpleName(session),simpleName(setUserArgument),arguments(nullLiteral())),methodInvocation(simpleName(session),simpleName(setMaxIdleTime),arguments(methodInvocation(simpleName(authenticatedUser),simpleName(getMaxIdleTime)))),assignment(simpleName(success),operator(=),booleanLiteral(true)))),block(statements(methodInvocation(simpleName(session),simpleName(setUser),arguments(nullLiteral()))))), V30 -> variableDeclarationStatement(simpleType(FileSystemFactory),fragments(variableDeclarationFragment(simpleName(fmanager),methodInvocation(simpleName(context),simpleName(getFileSystemManager))))), V31 -> variableDeclarationStatement(simpleType(FileSystemView),fragments(variableDeclarationFragment(simpleName(fsview),methodInvocation(simpleName(fmanager),simpleName(createFileSystemView),arguments(simpleName(authenticatedUser)))))), V32 -> NIL, V33 -> ifStatement, V34 -> infixExpression, V35 -> NIL, V36 -> NIL, V37 -> NIL, V38 -> NIL, V39 -> block, V40 -> NIL, V41 -> NIL, V42 -> NIL, V43 -> NIL, V44 -> NIL, V45 -> NIL, V46 -> methodInvocation(methodInvocation(simpleName(session),simpleName(close),arguments(booleanLiteral(false))),simpleName(awaitUninterruptibly),arguments(numberLiteral(10000))), V47 -> NIL, V48 -> NIL, V49 -> variableDeclarationStatement(simpleType(ServerFtpStatistics),fragments(variableDeclarationFragment(simpleName(stat),castExpression(simpleType(ServerFtpStatistics),methodInvocation(simpleName(context),simpleName(getFtpStatistics)))))), V50 -> primitiveType(void)}

Theta8 = {V1 -> public, V2 -> execute, V3 -> formalParameter, V4 -> formalParameter(modifiers(modifier(final)), V5 -> formalParameter, V6 -> formalParameter, V7 -> formalParameter, V8 -> formalParameter, V9 -> NIL, V10 -> formalParameter, V11 -> formalParameter(modifiers(modifier(final)), V12 -> simpleName, V13 -> IOException, V14 -> FtpException, V15 -> simpleName, V16 -> tryStatement, V17 -> block, V18 -> NIL, V19 -> variableDeclarationStatement(simpleType(String),fragments(variableDeclarationFragment(simpleName(userName),methodInvocation(simpleName(session),simpleName(getUserArgument))))), V20 -> variableDeclarationStatement(primitiveType(int),fragments(variableDeclarationFragment(simpleName(currLogin),methodInvocation(simpleName(stat),simpleName(getCurrentLoginNumber))))), V21 -> variableDeclarationStatement(primitiveType(int),fragments(variableDeclarationFragment(simpleName(maxLogin),methodInvocation(methodInvocation(simpleName(context),simpleName(getConnectionConfig)),simpleName(getMaxLogins))))), V22 -> ifStatement(infixExpression(infixExpression(simpleName(maxLogin),operator(!=),numberLiteral(0)),operator(&&),infixExpression(simpleName(currLogin),operator(>=),simpleName(maxLogin))),block(statements(methodInvocation(simpleName(session),simpleName(write),arguments(methodInvocation(simpleName(LocalizedFtpReply),simpleName(translate),arguments(simpleName(session),simpleName(request),simpleName(context),qualifiedName(simpleName(FtpReply),simpleName(REPLY_421_SERVICE_NOT_AVAILABLE_CLOSING_CONTROL_CONNECTION)),stringLiteral("PASS.login"),nullLiteral())))),returnStatement()))), V23 -> variableDeclarationStatement(simpleType(UserManager),fragments(variableDeclarationFragment(simpleName(userManager),methodInvocation(simpleName(context),simpleName(getUserManager))))), V24 -> variableDeclarationStatement(simpleType(User),fragments(variableDeclarationFragment(simpleName(authenticatedUser),nullLiteral()))), V25 -> tryStatement(block(statements(variableDeclarationStatement(simpleType(UserMetadata),fragments(variableDeclarationFragment(simpleName(userMetadata),classInstanceCreation(simpleType(UserMetadata))))),ifStatement(instanceofExpression(methodInvocation(simpleName(session),simpleName(getRemoteAddress)),simpleType(InetSocketAddress)),block(statements(methodInvocation(simpleName(userMetadata),simpleName(setInetAddress),arguments(methodInvocation(parenthesizedExpression(castExpression(simpleType(InetSocketAddress),methodInvocation(simpleName(session),simpleName(getRemoteAddress)))),simpleName(getAddress))))))),methodInvocation(simpleName(userMetadata),simpleName(setCertificateChain),arguments(methodInvocation(simpleName(session),simpleName(getClientCertificates)))),variableDeclarationStatement(simpleType(Authentication),fragments(variableDeclarationFragment(simpleName(auth)))),ifStatement(simpleName(anonymous),block(statements(assignment(simpleName(auth),operator(=),classInstanceCreation(simpleType(AnonymousAuthentication),arguments(simpleName(userMetadata)))))),block(statements(assignment(simpleName(auth),operator(=),classInstanceCreation(simpleType(UsernamePasswordAuthentication),arguments(simpleName(userName),simpleName(password),simpleName(userMetadata))))))),assignment(simpleName(authenticatedUser),operator(=),methodInvocation(simpleName(userManager),simpleName(authenticate),arguments(simpleName(auth)))))),catchClauses(catchClause(singleVariableDeclaration(simpleType(AuthenticationFailedException),simpleName(e)),block(statements(assignment(simpleName(authenticatedUser),operator(=),nullLiteral())))),catchClause(singleVariableDeclaration(simpleType(Exception),simpleName(e)),block(statements(assignment(simpleName(authenticatedUser),operator(=),nullLiteral())))))), V26 -> variableDeclarationStatement(simpleType(User),fragments(variableDeclarationFragment(simpleName(oldUser),methodInvocation(simpleName(session),simpleName(getUser))))), V27 -> variableDeclarationStatement(simpleType(String),fragments(variableDeclarationFragment(simpleName(oldUserArgument),methodInvocation(simpleName(session),simpleName(getUserArgument))))), V28 -> variableDeclarationStatement(primitiveType(int),fragments(variableDeclarationFragment(simpleName(oldMaxIdleTime),methodInvocation(simpleName(session),simpleName(getMaxIdleTime))))), V29 -> ifStatement(infixExpression(simpleName(authenticatedUser),operator(!=),nullLiteral()),block(statements(methodInvocation(simpleName(session),simpleName(setUser),arguments(simpleName(authenticatedUser))),methodInvocation(simpleName(session),simpleName(setUserArgument),arguments(nullLiteral())),methodInvocation(simpleName(session),simpleName(setMaxIdleTime),arguments(methodInvocation(simpleName(authenticatedUser),simpleName(getMaxIdleTime)))),assignment(simpleName(success),operator(=),booleanLiteral(true)))),block(statements(methodInvocation(simpleName(session),simpleName(setUser),arguments(nullLiteral()))))), V30 -> variableDeclarationStatement(simpleType(FileSystemFactory),fragments(variableDeclarationFragment(simpleName(fmanager),methodInvocation(simpleName(context),simpleName(getFileSystemManager))))), V31 -> variableDeclarationStatement(simpleType(FileSystemView),fragments(variableDeclarationFragment(simpleName(fsview),methodInvocation(simpleName(fmanager),simpleName(createFileSystemView),arguments(simpleName(authenticatedUser)))))), V32 -> ifStatement(simpleName(anonymous),block(),block()), V33 -> ifStatement, V34 -> infixExpression, V35 -> NIL, V36 -> NIL, V37 -> NIL, V38 -> NIL, V39 -> block, V40 -> NIL, V41 -> NIL, V42 -> NIL, V43 -> NIL, V44 -> NIL, V45 -> NIL, V46 -> methodInvocation(methodInvocation(simpleName(session),simpleName(close),arguments(booleanLiteral(false))),simpleName(awaitUninterruptibly),arguments(numberLiteral(10000))), V47 -> NIL, V48 -> NIL, V49 -> variableDeclarationStatement(simpleType(ServerFtpStatistics),fragments(variableDeclarationFragment(simpleName(stat),castExpression(simpleType(ServerFtpStatistics),methodInvocation(simpleName(context),simpleName(getFtpStatistics)))))), V50 -> primitiveType(void)}

Theta9 = {V1 -> private, V2 -> getConfiguration, V3 -> formalParameter, V4 -> NIL, V5 -> formalParameter, V6 -> formalParameter, V7 -> formalParameter, V8 -> formalParameter, V9 -> NIL, V10 -> formalParameter, V11 -> NIL, V12 -> simpleName, V13 -> Exception, V14 -> FtpException, V15 -> simpleName, V16 -> NIL, V17 -> block, V18 -> NIL, V19 -> NIL, V20 -> NIL, V21 -> NIL, V22 -> NIL, V23 -> NIL, V24 -> NIL, V25 -> NIL, V26 -> NIL, V27 -> NIL, V28 -> NIL, V29 -> NIL, V30 -> NIL, V31 -> NIL, V32 -> NIL, V33 -> ifStatement, V34 -> infixExpression, V35 -> infixExpression(simpleName(args),operator(==),nullLiteral()), V36 -> infixExpression(qualifiedName(simpleName(args),simpleName(length)),operator(<),numberLiteral(2)), V37 -> NIL, V38 -> NIL, V39 -> block, V40 -> NIL, V41 -> NIL, V42 -> NIL, V43 -> NIL, V44 -> NIL, V45 -> NIL, V46 -> NIL, V47 -> NIL, V48 -> NIL, V49 -> NIL, V50 -> NIL}

Theta10 = {V1 -> private, V2 -> getConfiguration, V3 -> formalParameter, V4 -> NIL, V5 -> formalParameter, V6 -> formalParameter, V7 -> formalParameter, V8 -> formalParameter, V9 -> NIL, V10 -> formalParameter, V11 -> NIL, V12 -> simpleName, V13 -> Exception, V14 -> FtpException, V15 -> simpleName, V16 -> NIL, V17 -> block, V18 -> NIL, V19 -> NIL, V20 -> NIL, V21 -> NIL, V22 -> NIL, V23 -> NIL, V24 -> NIL, V25 -> NIL, V26 -> NIL, V27 -> NIL, V28 -> NIL, V29 -> NIL, V30 -> NIL, V31 -> NIL, V32 -> NIL, V33 -> ifStatement, V34 -> infixExpression, V35 -> infixExpression(simpleName(args),operator(==),nullLiteral()), V36 -> infixExpression(qualifiedName(simpleName(args),simpleName(length)),operator(<),numberLiteral(2)), V37 -> NIL, V38 -> NIL, V39 -> block, V40 -> NIL, V41 -> NIL, V42 -> NIL, V43 -> NIL, V44 -> NIL, V45 -> NIL, V46 -> NIL, V47 -> NIL, V48 -> NIL, V49 -> NIL, V50 -> NIL}

Theta11 = {V1 -> private, V2 -> getConfiguration, V3 -> formalParameter, V4 -> NIL, V5 -> formalParameter, V6 -> formalParameter, V7 -> formalParameter, V8 -> formalParameter, V9 -> NIL, V10 -> formalParameter, V11 -> NIL, V12 -> simpleName, V13 -> Exception, V14 -> FtpException, V15 -> simpleName, V16 -> NIL, V17 -> block, V18 -> NIL, V19 -> NIL, V20 -> NIL, V21 -> NIL, V22 -> NIL, V23 -> NIL, V24 -> NIL, V25 -> NIL, V26 -> NIL, V27 -> NIL, V28 -> NIL, V29 -> NIL, V30 -> NIL, V31 -> NIL, V32 -> NIL, V33 -> ifStatement, V34 -> infixExpression, V35 -> infixExpression(simpleName(args),operator(==),nullLiteral()), V36 -> infixExpression(qualifiedName(simpleName(args),simpleName(length)),operator(<),numberLiteral(2)), V37 -> NIL, V38 -> NIL, V39 -> block, V40 -> NIL, V41 -> NIL, V42 -> NIL, V43 -> NIL, V44 -> NIL, V45 -> NIL, V46 -> NIL, V47 -> NIL, V48 -> NIL, V49 -> NIL, V50 -> NIL}

Theta12 = {V1 -> private, V2 -> getConfiguration, V3 -> formalParameter, V4 -> NIL, V5 -> formalParameter, V6 -> formalParameter, V7 -> formalParameter, V8 -> formalParameter, V9 -> NIL, V10 -> formalParameter, V11 -> NIL, V12 -> simpleName, V13 -> Exception, V14 -> FtpException, V15 -> simpleName, V16 -> NIL, V17 -> block, V18 -> NIL, V19 -> NIL, V20 -> NIL, V21 -> NIL, V22 -> NIL, V23 -> NIL, V24 -> NIL, V25 -> NIL, V26 -> NIL, V27 -> NIL, V28 -> NIL, V29 -> NIL, V30 -> NIL, V31 -> NIL, V32 -> NIL, V33 -> ifStatement, V34 -> infixExpression, V35 -> infixExpression(simpleName(args),operator(==),nullLiteral()), V36 -> infixExpression(qualifiedName(simpleName(args),simpleName(length)),operator(<),numberLiteral(2)), V37 -> NIL, V38 -> NIL, V39 -> block, V40 -> NIL, V41 -> NIL, V42 -> NIL, V43 -> NIL, V44 -> NIL, V45 -> NIL, V46 -> NIL, V47 -> NIL, V48 -> NIL, V49 -> NIL, V50 -> NIL}

Theta13 = {V1 -> public, V2 -> createDefaultUsers, V3 -> NIL, V4 -> NIL, V5 -> NIL, V6 -> NIL, V7 -> NIL, V8 -> NIL, V9 -> NIL, V10 -> NIL, V11 -> NIL, V12 -> simpleName, V13 -> Exception, V14 -> Exception, V15 -> simpleName, V16 -> NIL, V17 -> block, V18 -> NIL, V19 -> NIL, V20 -> NIL, V21 -> NIL, V22 -> NIL, V23 -> NIL, V24 -> NIL, V25 -> NIL, V26 -> NIL, V27 -> NIL, V28 -> NIL, V29 -> NIL, V30 -> NIL, V31 -> NIL, V32 -> NIL, V33 -> ifStatement, V34 -> NIL, V35 -> NIL, V36 -> NIL, V37 -> methodInvocation, V38 -> NIL, V39 -> block, V40 -> NIL, V41 -> NIL, V42 -> variableDeclarationStatement(simpleType(String),fragments(variableDeclarationFragment(simpleName(adminName),methodInvocation(simpleName(userManager),simpleName(getAdminName))))), V43 -> NIL, V44 -> NIL, V45 -> NIL, V46 -> ifStatement(prefixExpression (operator(!),methodInvocation(simpleName(userManager),simpleName(doesExist),arguments(simpleName(adminName)))),block(statements(variableDeclarationStatement(simpleType(BaseUser),fragments(variableDeclarationFragment(simpleName(adminUser),classInstanceCreation(simpleType(BaseUser))))),methodInvocation(simpleName(adminUser),simpleName(setName),arguments(simpleName(adminName))),methodInvocation(simpleName(adminUser),simpleName(setPassword),arguments(simpleName(adminName))),methodInvocation(simpleName(adminUser),simpleName(setEnabled),arguments(booleanLiteral(true))),methodInvocation(simpleName(adminUser),simpleName(setAuthorities),arguments(simpleName(ADMIN_AUTHORITIES))),methodInvocation(simpleName(adminUser),simpleName(setHomeDirectory),arguments(stringLiteral("./res/home"))),methodInvocation(simpleName(adminUser),simpleName(setMaxIdleTime),arguments(numberLiteral(0))),methodInvocation(simpleName(userManager),simpleName(save),arguments(simpleName(adminUser)))))), V47 -> NIL, V48 -> NIL, V49 -> NIL, V50 -> primitiveType(void)}

Theta14 = {V1 -> public, V2 -> createDefaultUsers, V3 -> NIL, V4 -> NIL, V5 -> NIL, V6 -> NIL, V7 -> NIL, V8 -> NIL, V9 -> NIL, V10 -> NIL, V11 -> NIL, V12 -> simpleName, V13 -> Exception, V14 -> Exception, V15 -> simpleName, V16 -> NIL, V17 -> block, V18 -> NIL, V19 -> NIL, V20 -> NIL, V21 -> NIL, V22 -> NIL, V23 -> NIL, V24 -> NIL, V25 -> NIL, V26 -> NIL, V27 -> NIL, V28 -> NIL, V29 -> NIL, V30 -> NIL, V31 -> NIL, V32 -> NIL, V33 -> ifStatement, V34 -> infixExpression, V35 -> NIL, V36 -> NIL, V37 -> methodInvocation, V38 -> NIL, V39 -> block, V40 -> NIL, V41 -> NIL, V42 -> variableDeclarationStatement(simpleType(String),fragments(variableDeclarationFragment(simpleName(adminName),methodInvocation(simpleName(userManager),simpleName(getAdminName))))), V43 -> NIL, V44 -> NIL, V45 -> NIL, V46 -> ifStatement(prefixExpression (operator(!),methodInvocation(simpleName(userManager),simpleName(doesExist),arguments(stringLiteral("anonymous")))),block(statements(variableDeclarationStatement(simpleType(BaseUser),fragments(variableDeclarationFragment(simpleName(anonUser),classInstanceCreation(simpleType(BaseUser))))),methodInvocation(simpleName(anonUser),simpleName(setName),arguments(stringLiteral("anonymous"))),methodInvocation(simpleName(anonUser),simpleName(setPassword),arguments(stringLiteral(""))),methodInvocation(simpleName(anonUser),simpleName(setAuthorities),arguments(simpleName(ANON_AUTHORITIES))),methodInvocation(simpleName(anonUser),simpleName(setEnabled),arguments(booleanLiteral(true))),methodInvocation(simpleName(anonUser),simpleName(setHomeDirectory),arguments(stringLiteral("./res/home"))),methodInvocation(simpleName(anonUser),simpleName(setMaxIdleTime),arguments(numberLiteral(300))),methodInvocation(simpleName(userManager),simpleName(save),arguments(simpleName(anonUser)))))), V47 -> NIL, V48 -> NIL, V49 -> NIL, V50 -> primitiveType(void)}

Theta15 = {V1 -> public, V2 -> createFileSystemView, V3 -> formalParameter, V4 -> NIL, V5 -> formalParameter, V6 -> formalParameter, V7 -> formalParameter, V8 -> formalParameter, V9 -> NIL, V10 -> formalParameter, V11 -> NIL, V12 -> simpleName, V13 -> Exception, V14 -> FtpException, V15 -> simpleName, V16 -> NIL, V17 -> block, V18 -> NIL, V19 -> NIL, V20 -> NIL, V21 -> NIL, V22 -> NIL, V23 -> NIL, V24 -> NIL, V25 -> NIL, V26 -> NIL, V27 -> NIL, V28 -> NIL, V29 -> NIL, V30 -> NIL, V31 -> NIL, V32 -> NIL, V33 -> ifStatement, V34 -> infixExpression, V35 -> NIL, V36 -> NIL, V37 -> synchronizedStatement, V38 -> simpleName(user), V39 -> block, V40 -> variableDeclarationStatement(simpleType(FileSystemView),fragments(variableDeclarationFragment(simpleName(fsView),classInstanceCreation(simpleType(NativeFileSystemView),arguments(simpleName(user),simpleName(caseInsensitive)))))), V41 -> returnStatement(simpleName(fsView)), V42 -> NIL, V43 -> NIL, V44 -> NIL, V45 -> NIL, V46 -> NIL, V47 -> NIL, V48 -> NIL, V49 -> NIL, V50 -> NIL}

Theta16 = {V1 -> public, V2 -> createFileSystemView, V3 -> formalParameter, V4 -> NIL, V5 -> formalParameter, V6 -> formalParameter, V7 -> formalParameter, V8 -> formalParameter, V9 -> NIL, V10 -> formalParameter, V11 -> NIL, V12 -> simpleName, V13 -> Exception, V14 -> FtpException, V15 -> simpleName, V16 -> NIL, V17 -> block, V18 -> NIL, V19 -> NIL, V20 -> NIL, V21 -> NIL, V22 -> NIL, V23 -> NIL, V24 -> NIL, V25 -> NIL, V26 -> NIL, V27 -> NIL, V28 -> NIL, V29 -> NIL, V30 -> NIL, V31 -> NIL, V32 -> NIL, V33 -> ifStatement, V34 -> infixExpression, V35 -> NIL, V36 -> NIL, V37 -> synchronizedStatement, V38 -> simpleName(user), V39 -> block, V40 -> variableDeclarationStatement(simpleType(FileSystemView),fragments(variableDeclarationFragment(simpleName(fsView),classInstanceCreation(simpleType(NativeFileSystemView),arguments(simpleName(user),simpleName(caseInsensitive)))))), V41 -> returnStatement(simpleName(fsView)), V42 -> NIL, V43 -> NIL, V44 -> NIL, V45 -> NIL, V46 -> NIL, V47 -> NIL, V48 -> NIL, V49 -> NIL, V50 -> NIL}

Theta17 = {V1 -> public, V2 -> exceptionCaught, V3 -> formalParameter, V4 -> formalParameter(modifiers(modifier(final)), V5 -> formalParameter, V6 -> formalParameter, V7 -> formalParameter, V8 -> formalParameter, V9 -> NIL, V10 -> formalParameter, V11 -> formalParameter(modifiers(modifier(final)), V12 -> simpleName, V13 -> Exception, V14 -> Exception, V15 -> simpleName, V16 -> NIL, V17 -> block, V18 -> NIL, V19 -> NIL, V20 -> NIL, V21 -> NIL, V22 -> NIL, V23 -> NIL, V24 -> NIL, V25 -> NIL, V26 -> NIL, V27 -> NIL, V28 -> NIL, V29 -> NIL, V30 -> NIL, V31 -> NIL, V32 -> NIL, V33 -> ifStatement, V34 -> NIL, V35 -> NIL, V36 -> NIL, V37 -> methodInvocation, V38 -> NIL, V39 -> block, V40 -> NIL, V41 -> NIL, V42 -> NIL, V43 -> NIL, V44 -> NIL, V45 -> NIL, V46 -> methodInvocation(methodInvocation(simpleName(session),simpleName(close),arguments(booleanLiteral(false))),simpleName(awaitUninterruptibly),arguments(numberLiteral(10000))), V47 -> NIL, V48 -> NIL, V49 -> NIL, V50 -> primitiveType(void)}

Theta18 = {V1 -> public, V2 -> exceptionCaught, V3 -> formalParameter, V4 -> formalParameter(modifiers(modifier(final)), V5 -> formalParameter, V6 -> formalParameter, V7 -> formalParameter, V8 -> formalParameter, V9 -> NIL, V10 -> formalParameter, V11 -> formalParameter(modifiers(modifier(final)), V12 -> simpleName, V13 -> Exception, V14 -> Exception, V15 -> simpleName, V16 -> NIL, V17 -> block, V18 -> NIL, V19 -> NIL, V20 -> NIL, V21 -> NIL, V22 -> NIL, V23 -> NIL, V24 -> NIL, V25 -> NIL, V26 -> NIL, V27 -> NIL, V28 -> NIL, V29 -> NIL, V30 -> NIL, V31 -> NIL, V32 -> NIL, V33 -> ifStatement, V34 -> NIL, V35 -> NIL, V36 -> NIL, V37 -> NIL, V38 -> NIL, V39 -> block, V40 -> NIL, V41 -> NIL, V42 -> NIL, V43 -> NIL, V44 -> NIL, V45 -> NIL, V46 -> methodInvocation(methodInvocation(simpleName(session),simpleName(close),arguments(booleanLiteral(false))),simpleName(awaitUninterruptibly),arguments(numberLiteral(10000))), V47 -> NIL, V48 -> NIL, V49 -> NIL, V50 -> primitiveType(void)}

